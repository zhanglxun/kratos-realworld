// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: realworld/v1/system.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSystemServiceLogin = "/realoworld.v1.SystemService/Login"
const OperationSystemServiceUserList = "/realoworld.v1.SystemService/UserList"

type SystemServiceHTTPServer interface {
	// Login账号登录rpc接口定义
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	// UserList用户列表
	UserList(context.Context, *UserRequest) (*UserReply, error)
}

func RegisterSystemServiceHTTPServer(s *http.Server, srv SystemServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/User/getUserList", _SystemService_UserList0_HTTP_Handler(srv))
	r.POST("/User/login", _SystemService_Login0_HTTP_Handler(srv))
}

func _SystemService_UserList0_HTTP_Handler(srv SystemServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSystemServiceUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserList(ctx, req.(*UserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _SystemService_Login0_HTTP_Handler(srv SystemServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSystemServiceLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

type SystemServiceHTTPClient interface {
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	UserList(ctx context.Context, req *UserRequest, opts ...http.CallOption) (rsp *UserReply, err error)
}

type SystemServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSystemServiceHTTPClient(client *http.Client) SystemServiceHTTPClient {
	return &SystemServiceHTTPClientImpl{client}
}

func (c *SystemServiceHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/User/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSystemServiceLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SystemServiceHTTPClientImpl) UserList(ctx context.Context, in *UserRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/User/getUserList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSystemServiceUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

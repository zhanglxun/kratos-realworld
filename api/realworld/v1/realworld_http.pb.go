// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: realworld/v1/realworld.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRealWorldCategoryList = "/realoworld.v1.RealWorld/CategoryList"
const OperationRealWorldSayHello = "/realoworld.v1.RealWorld/SayHello"
const OperationRealWorldWebSiteHome = "/realoworld.v1.RealWorld/WebSiteHome"
const OperationRealWorldWebSiteList = "/realoworld.v1.RealWorld/WebSiteList"

type RealWorldHTTPServer interface {
	CategoryList(context.Context, *CategoryRequest) (*MultipleCategoryReply, error)
	// SayHello Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	WebSiteHome(context.Context, *WebHomeRequest) (*MultipleWebsiteReply, error)
	WebSiteList(context.Context, *WebsiteRequest) (*WebsiteReply, error)
}

func RegisterRealWorldHTTPServer(s *http.Server, srv RealWorldHTTPServer) {
	r := s.Route("/")
	r.GET("/realworld/{name}", _RealWorld_SayHello0_HTTP_Handler(srv))
	r.GET("/website/websiteList", _RealWorld_WebSiteList0_HTTP_Handler(srv))
	r.GET("/website/websiteHome", _RealWorld_WebSiteHome0_HTTP_Handler(srv))
	r.GET("/category/CategoryList", _RealWorld_CategoryList0_HTTP_Handler(srv))
}

func _RealWorld_SayHello0_HTTP_Handler(srv RealWorldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealWorldSayHello)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayHello(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloReply)
		return ctx.Result(200, reply)
	}
}

func _RealWorld_WebSiteList0_HTTP_Handler(srv RealWorldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WebsiteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealWorldWebSiteList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WebSiteList(ctx, req.(*WebsiteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WebsiteReply)
		return ctx.Result(200, reply)
	}
}

func _RealWorld_WebSiteHome0_HTTP_Handler(srv RealWorldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WebHomeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealWorldWebSiteHome)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WebSiteHome(ctx, req.(*WebHomeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MultipleWebsiteReply)
		return ctx.Result(200, reply)
	}
}

func _RealWorld_CategoryList0_HTTP_Handler(srv RealWorldHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRealWorldCategoryList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CategoryList(ctx, req.(*CategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MultipleCategoryReply)
		return ctx.Result(200, reply)
	}
}

type RealWorldHTTPClient interface {
	CategoryList(ctx context.Context, req *CategoryRequest, opts ...http.CallOption) (rsp *MultipleCategoryReply, err error)
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
	WebSiteHome(ctx context.Context, req *WebHomeRequest, opts ...http.CallOption) (rsp *MultipleWebsiteReply, err error)
	WebSiteList(ctx context.Context, req *WebsiteRequest, opts ...http.CallOption) (rsp *WebsiteReply, err error)
}

type RealWorldHTTPClientImpl struct {
	cc *http.Client
}

func NewRealWorldHTTPClient(client *http.Client) RealWorldHTTPClient {
	return &RealWorldHTTPClientImpl{client}
}

func (c *RealWorldHTTPClientImpl) CategoryList(ctx context.Context, in *CategoryRequest, opts ...http.CallOption) (*MultipleCategoryReply, error) {
	var out MultipleCategoryReply
	pattern := "/category/CategoryList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealWorldCategoryList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RealWorldHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/realworld/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealWorldSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RealWorldHTTPClientImpl) WebSiteHome(ctx context.Context, in *WebHomeRequest, opts ...http.CallOption) (*MultipleWebsiteReply, error) {
	var out MultipleWebsiteReply
	pattern := "/website/websiteHome"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealWorldWebSiteHome))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RealWorldHTTPClientImpl) WebSiteList(ctx context.Context, in *WebsiteRequest, opts ...http.CallOption) (*WebsiteReply, error) {
	var out WebsiteReply
	pattern := "/website/websiteList"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRealWorldWebSiteList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

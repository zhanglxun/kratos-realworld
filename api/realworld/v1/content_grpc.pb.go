// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: realworld/v1/content.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContentService_SayHello_FullMethodName     = "/realoworld.v1.ContentService/SayHello"
	ContentService_WebSiteList_FullMethodName  = "/realoworld.v1.ContentService/WebSiteList"
	ContentService_WebSiteHome_FullMethodName  = "/realoworld.v1.ContentService/WebSiteHome"
	ContentService_CategoryList_FullMethodName = "/realoworld.v1.ContentService/CategoryList"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	WebSiteList(ctx context.Context, in *WebsiteRequest, opts ...grpc.CallOption) (*WebsiteReply, error)
	WebSiteHome(ctx context.Context, in *WebHomeRequest, opts ...grpc.CallOption) (*MultipleWebsiteReply, error)
	CategoryList(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*MultipleCategoryReply, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, ContentService_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) WebSiteList(ctx context.Context, in *WebsiteRequest, opts ...grpc.CallOption) (*WebsiteReply, error) {
	out := new(WebsiteReply)
	err := c.cc.Invoke(ctx, ContentService_WebSiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) WebSiteHome(ctx context.Context, in *WebHomeRequest, opts ...grpc.CallOption) (*MultipleWebsiteReply, error) {
	out := new(MultipleWebsiteReply)
	err := c.cc.Invoke(ctx, ContentService_WebSiteHome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CategoryList(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*MultipleCategoryReply, error) {
	out := new(MultipleCategoryReply)
	err := c.cc.Invoke(ctx, ContentService_CategoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	WebSiteList(context.Context, *WebsiteRequest) (*WebsiteReply, error)
	WebSiteHome(context.Context, *WebHomeRequest) (*MultipleWebsiteReply, error)
	CategoryList(context.Context, *CategoryRequest) (*MultipleCategoryReply, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedContentServiceServer) WebSiteList(context.Context, *WebsiteRequest) (*WebsiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebSiteList not implemented")
}
func (UnimplementedContentServiceServer) WebSiteHome(context.Context, *WebHomeRequest) (*MultipleWebsiteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebSiteHome not implemented")
}
func (UnimplementedContentServiceServer) CategoryList(context.Context, *CategoryRequest) (*MultipleCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryList not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_WebSiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).WebSiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_WebSiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).WebSiteList(ctx, req.(*WebsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_WebSiteHome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebHomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).WebSiteHome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_WebSiteHome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).WebSiteHome(ctx, req.(*WebHomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CategoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CategoryList(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realoworld.v1.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ContentService_SayHello_Handler,
		},
		{
			MethodName: "WebSiteList",
			Handler:    _ContentService_WebSiteList_Handler,
		},
		{
			MethodName: "WebSiteHome",
			Handler:    _ContentService_WebSiteHome_Handler,
		},
		{
			MethodName: "CategoryList",
			Handler:    _ContentService_CategoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "realworld/v1/content.proto",
}

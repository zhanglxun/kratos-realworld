// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-server/internal/data/ent/article"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Article is the model entity for the Article schema.
type Article struct {
	config `json:"-"`
	// ID of the ent.
	// 主键
	ID int32 `json:"id,omitempty"`
	// 排序ID
	SortID int32 `json:"sort_id,omitempty"`
	// 标题名称
	Name string `json:"name,omitempty"`
	// 资讯分类的主键
	CategoryID int32 `json:"category_id,omitempty"`
	// 小编一句话推荐语
	Recommend string `json:"recommend,omitempty"`
	// 简介内容描述
	Description string `json:"description,omitempty"`
	// 内容
	ContentBody string `json:"content_body,omitempty"`
	// 图片缩略图
	ImageURL string `json:"image_url,omitempty"`
	// 状态 1：启用 0：禁用
	Status int32 `json:"status,omitempty"`
	// 浏览次数
	ClickCount int32 `json:"click_count,omitempty"`
	// 点赞次数
	LikeCount int32 `json:"like_count,omitempty"`
	// 创建人id
	CreateID int64 `json:"create_id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 修改人id
	ModifyID int64 `json:"modify_id,omitempty"`
	// 修改时间
	ModifyTime time.Time `json:"modify_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Article) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case article.FieldID, article.FieldSortID, article.FieldCategoryID, article.FieldStatus, article.FieldClickCount, article.FieldLikeCount, article.FieldCreateID, article.FieldModifyID:
			values[i] = new(sql.NullInt64)
		case article.FieldName, article.FieldRecommend, article.FieldDescription, article.FieldContentBody, article.FieldImageURL:
			values[i] = new(sql.NullString)
		case article.FieldCreateTime, article.FieldModifyTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Article", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Article fields.
func (a *Article) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case article.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int32(value.Int64)
		case article.FieldSortID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort_id", values[i])
			} else if value.Valid {
				a.SortID = int32(value.Int64)
			}
		case article.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case article.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				a.CategoryID = int32(value.Int64)
			}
		case article.FieldRecommend:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recommend", values[i])
			} else if value.Valid {
				a.Recommend = value.String
			}
		case article.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				a.Description = value.String
			}
		case article.FieldContentBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_body", values[i])
			} else if value.Valid {
				a.ContentBody = value.String
			}
		case article.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				a.ImageURL = value.String
			}
		case article.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = int32(value.Int64)
			}
		case article.FieldClickCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field click_count", values[i])
			} else if value.Valid {
				a.ClickCount = int32(value.Int64)
			}
		case article.FieldLikeCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field like_count", values[i])
			} else if value.Valid {
				a.LikeCount = int32(value.Int64)
			}
		case article.FieldCreateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_id", values[i])
			} else if value.Valid {
				a.CreateID = value.Int64
			}
		case article.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case article.FieldModifyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field modify_id", values[i])
			} else if value.Valid {
				a.ModifyID = value.Int64
			}
		case article.FieldModifyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modify_time", values[i])
			} else if value.Valid {
				a.ModifyTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Article.
// Note that you need to call Article.Unwrap() before calling this method if this Article
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Article) Update() *ArticleUpdateOne {
	return NewArticleClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Article entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Article) Unwrap() *Article {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Article is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Article) String() string {
	var builder strings.Builder
	builder.WriteString("Article(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("sort_id=")
	builder.WriteString(fmt.Sprintf("%v", a.SortID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", a.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("recommend=")
	builder.WriteString(a.Recommend)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(a.Description)
	builder.WriteString(", ")
	builder.WriteString("content_body=")
	builder.WriteString(a.ContentBody)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(a.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteString(", ")
	builder.WriteString("click_count=")
	builder.WriteString(fmt.Sprintf("%v", a.ClickCount))
	builder.WriteString(", ")
	builder.WriteString("like_count=")
	builder.WriteString(fmt.Sprintf("%v", a.LikeCount))
	builder.WriteString(", ")
	builder.WriteString("create_id=")
	builder.WriteString(fmt.Sprintf("%v", a.CreateID))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modify_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ModifyID))
	builder.WriteString(", ")
	builder.WriteString("modify_time=")
	builder.WriteString(a.ModifyTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Articles is a parsable slice of Article.
type Articles []*Article

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-server/internal/data/ent/account"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Account is the model entity for the Account schema.
type Account struct {
	config `json:"-"`
	// ID of the ent.
	// 主键id，系统唯一标识
	ID int64 `json:"id,omitempty"`
	// 用户系统账号
	Account string `json:"account,omitempty"`
	// 系统密码
	Pwd string `json:"pwd,omitempty"`
	// 昵称
	Nickname string `json:"nickname,omitempty"`
	// 用户邮箱
	Email string `json:"email,omitempty"`
	// 手机号码
	Mobile string `json:"mobile,omitempty"`
	// CreateID holds the value of the "create_id" field.
	CreateID int64 `json:"create_id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// ModifyID holds the value of the "modify_id" field.
	ModifyID int64 `json:"modify_id,omitempty"`
	// ModifyTime holds the value of the "modify_time" field.
	ModifyTime time.Time `json:"modify_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Account) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case account.FieldID, account.FieldCreateID, account.FieldModifyID:
			values[i] = new(sql.NullInt64)
		case account.FieldAccount, account.FieldPwd, account.FieldNickname, account.FieldEmail, account.FieldMobile:
			values[i] = new(sql.NullString)
		case account.FieldCreateTime, account.FieldModifyTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Account", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Account fields.
func (a *Account) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case account.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int64(value.Int64)
		case account.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				a.Account = value.String
			}
		case account.FieldPwd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pwd", values[i])
			} else if value.Valid {
				a.Pwd = value.String
			}
		case account.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				a.Nickname = value.String
			}
		case account.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case account.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				a.Mobile = value.String
			}
		case account.FieldCreateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_id", values[i])
			} else if value.Valid {
				a.CreateID = value.Int64
			}
		case account.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case account.FieldModifyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field modify_id", values[i])
			} else if value.Valid {
				a.ModifyID = value.Int64
			}
		case account.FieldModifyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modify_time", values[i])
			} else if value.Valid {
				a.ModifyTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Account.
// Note that you need to call Account.Unwrap() before calling this method if this Account
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Account) Update() *AccountUpdateOne {
	return NewAccountClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Account entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Account) Unwrap() *Account {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Account is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Account) String() string {
	var builder strings.Builder
	builder.WriteString("Account(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("account=")
	builder.WriteString(a.Account)
	builder.WriteString(", ")
	builder.WriteString("pwd=")
	builder.WriteString(a.Pwd)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(a.Nickname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(a.Email)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(a.Mobile)
	builder.WriteString(", ")
	builder.WriteString("create_id=")
	builder.WriteString(fmt.Sprintf("%v", a.CreateID))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modify_id=")
	builder.WriteString(fmt.Sprintf("%v", a.ModifyID))
	builder.WriteString(", ")
	builder.WriteString("modify_time=")
	builder.WriteString(a.ModifyTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Accounts is a parsable slice of Account.
type Accounts []*Account

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-server/internal/data/ent/account"
	"go-server/internal/data/ent/article"
	"go-server/internal/data/ent/predicate"
	"go-server/internal/data/ent/website"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount = "Account"
	TypeArticle = "Article"
	TypeWebsite = "Website"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	account       *string
	pwd           *string
	nickname      *string
	email         *string
	mobile        *string
	create_id     *int64
	addcreate_id  *int64
	create_time   *time.Time
	modify_id     *int64
	addmodify_id  *int64
	modify_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Account, error)
	predicates    []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id int64) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Account entities.
func (m *AccountMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccount sets the "account" field.
func (m *AccountMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *AccountMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ClearAccount clears the value of the "account" field.
func (m *AccountMutation) ClearAccount() {
	m.account = nil
	m.clearedFields[account.FieldAccount] = struct{}{}
}

// AccountCleared returns if the "account" field was cleared in this mutation.
func (m *AccountMutation) AccountCleared() bool {
	_, ok := m.clearedFields[account.FieldAccount]
	return ok
}

// ResetAccount resets all changes to the "account" field.
func (m *AccountMutation) ResetAccount() {
	m.account = nil
	delete(m.clearedFields, account.FieldAccount)
}

// SetPwd sets the "pwd" field.
func (m *AccountMutation) SetPwd(s string) {
	m.pwd = &s
}

// Pwd returns the value of the "pwd" field in the mutation.
func (m *AccountMutation) Pwd() (r string, exists bool) {
	v := m.pwd
	if v == nil {
		return
	}
	return *v, true
}

// OldPwd returns the old "pwd" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPwd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPwd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPwd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPwd: %w", err)
	}
	return oldValue.Pwd, nil
}

// ClearPwd clears the value of the "pwd" field.
func (m *AccountMutation) ClearPwd() {
	m.pwd = nil
	m.clearedFields[account.FieldPwd] = struct{}{}
}

// PwdCleared returns if the "pwd" field was cleared in this mutation.
func (m *AccountMutation) PwdCleared() bool {
	_, ok := m.clearedFields[account.FieldPwd]
	return ok
}

// ResetPwd resets all changes to the "pwd" field.
func (m *AccountMutation) ResetPwd() {
	m.pwd = nil
	delete(m.clearedFields, account.FieldPwd)
}

// SetNickname sets the "nickname" field.
func (m *AccountMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *AccountMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ClearNickname clears the value of the "nickname" field.
func (m *AccountMutation) ClearNickname() {
	m.nickname = nil
	m.clearedFields[account.FieldNickname] = struct{}{}
}

// NicknameCleared returns if the "nickname" field was cleared in this mutation.
func (m *AccountMutation) NicknameCleared() bool {
	_, ok := m.clearedFields[account.FieldNickname]
	return ok
}

// ResetNickname resets all changes to the "nickname" field.
func (m *AccountMutation) ResetNickname() {
	m.nickname = nil
	delete(m.clearedFields, account.FieldNickname)
}

// SetEmail sets the "email" field.
func (m *AccountMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *AccountMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *AccountMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[account.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *AccountMutation) EmailCleared() bool {
	_, ok := m.clearedFields[account.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *AccountMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, account.FieldEmail)
}

// SetMobile sets the "mobile" field.
func (m *AccountMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *AccountMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ClearMobile clears the value of the "mobile" field.
func (m *AccountMutation) ClearMobile() {
	m.mobile = nil
	m.clearedFields[account.FieldMobile] = struct{}{}
}

// MobileCleared returns if the "mobile" field was cleared in this mutation.
func (m *AccountMutation) MobileCleared() bool {
	_, ok := m.clearedFields[account.FieldMobile]
	return ok
}

// ResetMobile resets all changes to the "mobile" field.
func (m *AccountMutation) ResetMobile() {
	m.mobile = nil
	delete(m.clearedFields, account.FieldMobile)
}

// SetCreateID sets the "create_id" field.
func (m *AccountMutation) SetCreateID(i int64) {
	m.create_id = &i
	m.addcreate_id = nil
}

// CreateID returns the value of the "create_id" field in the mutation.
func (m *AccountMutation) CreateID() (r int64, exists bool) {
	v := m.create_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateID returns the old "create_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreateID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateID: %w", err)
	}
	return oldValue.CreateID, nil
}

// AddCreateID adds i to the "create_id" field.
func (m *AccountMutation) AddCreateID(i int64) {
	if m.addcreate_id != nil {
		*m.addcreate_id += i
	} else {
		m.addcreate_id = &i
	}
}

// AddedCreateID returns the value that was added to the "create_id" field in this mutation.
func (m *AccountMutation) AddedCreateID() (r int64, exists bool) {
	v := m.addcreate_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateID clears the value of the "create_id" field.
func (m *AccountMutation) ClearCreateID() {
	m.create_id = nil
	m.addcreate_id = nil
	m.clearedFields[account.FieldCreateID] = struct{}{}
}

// CreateIDCleared returns if the "create_id" field was cleared in this mutation.
func (m *AccountMutation) CreateIDCleared() bool {
	_, ok := m.clearedFields[account.FieldCreateID]
	return ok
}

// ResetCreateID resets all changes to the "create_id" field.
func (m *AccountMutation) ResetCreateID() {
	m.create_id = nil
	m.addcreate_id = nil
	delete(m.clearedFields, account.FieldCreateID)
}

// SetCreateTime sets the "create_time" field.
func (m *AccountMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *AccountMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *AccountMutation) ClearCreateTime() {
	m.create_time = nil
	m.clearedFields[account.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *AccountMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[account.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *AccountMutation) ResetCreateTime() {
	m.create_time = nil
	delete(m.clearedFields, account.FieldCreateTime)
}

// SetModifyID sets the "modify_id" field.
func (m *AccountMutation) SetModifyID(i int64) {
	m.modify_id = &i
	m.addmodify_id = nil
}

// ModifyID returns the value of the "modify_id" field in the mutation.
func (m *AccountMutation) ModifyID() (r int64, exists bool) {
	v := m.modify_id
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyID returns the old "modify_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldModifyID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyID: %w", err)
	}
	return oldValue.ModifyID, nil
}

// AddModifyID adds i to the "modify_id" field.
func (m *AccountMutation) AddModifyID(i int64) {
	if m.addmodify_id != nil {
		*m.addmodify_id += i
	} else {
		m.addmodify_id = &i
	}
}

// AddedModifyID returns the value that was added to the "modify_id" field in this mutation.
func (m *AccountMutation) AddedModifyID() (r int64, exists bool) {
	v := m.addmodify_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearModifyID clears the value of the "modify_id" field.
func (m *AccountMutation) ClearModifyID() {
	m.modify_id = nil
	m.addmodify_id = nil
	m.clearedFields[account.FieldModifyID] = struct{}{}
}

// ModifyIDCleared returns if the "modify_id" field was cleared in this mutation.
func (m *AccountMutation) ModifyIDCleared() bool {
	_, ok := m.clearedFields[account.FieldModifyID]
	return ok
}

// ResetModifyID resets all changes to the "modify_id" field.
func (m *AccountMutation) ResetModifyID() {
	m.modify_id = nil
	m.addmodify_id = nil
	delete(m.clearedFields, account.FieldModifyID)
}

// SetModifyTime sets the "modify_time" field.
func (m *AccountMutation) SetModifyTime(t time.Time) {
	m.modify_time = &t
}

// ModifyTime returns the value of the "modify_time" field in the mutation.
func (m *AccountMutation) ModifyTime() (r time.Time, exists bool) {
	v := m.modify_time
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyTime returns the old "modify_time" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldModifyTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyTime: %w", err)
	}
	return oldValue.ModifyTime, nil
}

// ClearModifyTime clears the value of the "modify_time" field.
func (m *AccountMutation) ClearModifyTime() {
	m.modify_time = nil
	m.clearedFields[account.FieldModifyTime] = struct{}{}
}

// ModifyTimeCleared returns if the "modify_time" field was cleared in this mutation.
func (m *AccountMutation) ModifyTimeCleared() bool {
	_, ok := m.clearedFields[account.FieldModifyTime]
	return ok
}

// ResetModifyTime resets all changes to the "modify_time" field.
func (m *AccountMutation) ResetModifyTime() {
	m.modify_time = nil
	delete(m.clearedFields, account.FieldModifyTime)
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Account, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.account != nil {
		fields = append(fields, account.FieldAccount)
	}
	if m.pwd != nil {
		fields = append(fields, account.FieldPwd)
	}
	if m.nickname != nil {
		fields = append(fields, account.FieldNickname)
	}
	if m.email != nil {
		fields = append(fields, account.FieldEmail)
	}
	if m.mobile != nil {
		fields = append(fields, account.FieldMobile)
	}
	if m.create_id != nil {
		fields = append(fields, account.FieldCreateID)
	}
	if m.create_time != nil {
		fields = append(fields, account.FieldCreateTime)
	}
	if m.modify_id != nil {
		fields = append(fields, account.FieldModifyID)
	}
	if m.modify_time != nil {
		fields = append(fields, account.FieldModifyTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldAccount:
		return m.Account()
	case account.FieldPwd:
		return m.Pwd()
	case account.FieldNickname:
		return m.Nickname()
	case account.FieldEmail:
		return m.Email()
	case account.FieldMobile:
		return m.Mobile()
	case account.FieldCreateID:
		return m.CreateID()
	case account.FieldCreateTime:
		return m.CreateTime()
	case account.FieldModifyID:
		return m.ModifyID()
	case account.FieldModifyTime:
		return m.ModifyTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldAccount:
		return m.OldAccount(ctx)
	case account.FieldPwd:
		return m.OldPwd(ctx)
	case account.FieldNickname:
		return m.OldNickname(ctx)
	case account.FieldEmail:
		return m.OldEmail(ctx)
	case account.FieldMobile:
		return m.OldMobile(ctx)
	case account.FieldCreateID:
		return m.OldCreateID(ctx)
	case account.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case account.FieldModifyID:
		return m.OldModifyID(ctx)
	case account.FieldModifyTime:
		return m.OldModifyTime(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case account.FieldPwd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPwd(v)
		return nil
	case account.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case account.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case account.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	case account.FieldCreateID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateID(v)
		return nil
	case account.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case account.FieldModifyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyID(v)
		return nil
	case account.FieldModifyTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyTime(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_id != nil {
		fields = append(fields, account.FieldCreateID)
	}
	if m.addmodify_id != nil {
		fields = append(fields, account.FieldModifyID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case account.FieldCreateID:
		return m.AddedCreateID()
	case account.FieldModifyID:
		return m.AddedModifyID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case account.FieldCreateID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateID(v)
		return nil
	case account.FieldModifyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModifyID(v)
		return nil
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(account.FieldAccount) {
		fields = append(fields, account.FieldAccount)
	}
	if m.FieldCleared(account.FieldPwd) {
		fields = append(fields, account.FieldPwd)
	}
	if m.FieldCleared(account.FieldNickname) {
		fields = append(fields, account.FieldNickname)
	}
	if m.FieldCleared(account.FieldEmail) {
		fields = append(fields, account.FieldEmail)
	}
	if m.FieldCleared(account.FieldMobile) {
		fields = append(fields, account.FieldMobile)
	}
	if m.FieldCleared(account.FieldCreateID) {
		fields = append(fields, account.FieldCreateID)
	}
	if m.FieldCleared(account.FieldCreateTime) {
		fields = append(fields, account.FieldCreateTime)
	}
	if m.FieldCleared(account.FieldModifyID) {
		fields = append(fields, account.FieldModifyID)
	}
	if m.FieldCleared(account.FieldModifyTime) {
		fields = append(fields, account.FieldModifyTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	switch name {
	case account.FieldAccount:
		m.ClearAccount()
		return nil
	case account.FieldPwd:
		m.ClearPwd()
		return nil
	case account.FieldNickname:
		m.ClearNickname()
		return nil
	case account.FieldEmail:
		m.ClearEmail()
		return nil
	case account.FieldMobile:
		m.ClearMobile()
		return nil
	case account.FieldCreateID:
		m.ClearCreateID()
		return nil
	case account.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case account.FieldModifyID:
		m.ClearModifyID()
		return nil
	case account.FieldModifyTime:
		m.ClearModifyTime()
		return nil
	}
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldAccount:
		m.ResetAccount()
		return nil
	case account.FieldPwd:
		m.ResetPwd()
		return nil
	case account.FieldNickname:
		m.ResetNickname()
		return nil
	case account.FieldEmail:
		m.ResetEmail()
		return nil
	case account.FieldMobile:
		m.ResetMobile()
		return nil
	case account.FieldCreateID:
		m.ResetCreateID()
		return nil
	case account.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case account.FieldModifyID:
		m.ResetModifyID()
		return nil
	case account.FieldModifyTime:
		m.ResetModifyTime()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Account edge %s", name)
}

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op             Op
	typ            string
	id             *int32
	sort_id        *int32
	addsort_id     *int32
	name           *string
	category_id    *int32
	addcategory_id *int32
	recommend      *string
	description    *string
	content_body   *string
	image_url      *string
	status         *int32
	addstatus      *int32
	click_count    *int32
	addclick_count *int32
	like_count     *int32
	addlike_count  *int32
	create_id      *int64
	addcreate_id   *int64
	create_time    *time.Time
	modify_id      *int64
	addmodify_id   *int64
	modify_time    *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Article, error)
	predicates     []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id int32) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Article entities.
func (m *ArticleMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSortID sets the "sort_id" field.
func (m *ArticleMutation) SetSortID(i int32) {
	m.sort_id = &i
	m.addsort_id = nil
}

// SortID returns the value of the "sort_id" field in the mutation.
func (m *ArticleMutation) SortID() (r int32, exists bool) {
	v := m.sort_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSortID returns the old "sort_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldSortID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortID: %w", err)
	}
	return oldValue.SortID, nil
}

// AddSortID adds i to the "sort_id" field.
func (m *ArticleMutation) AddSortID(i int32) {
	if m.addsort_id != nil {
		*m.addsort_id += i
	} else {
		m.addsort_id = &i
	}
}

// AddedSortID returns the value that was added to the "sort_id" field in this mutation.
func (m *ArticleMutation) AddedSortID() (r int32, exists bool) {
	v := m.addsort_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortID clears the value of the "sort_id" field.
func (m *ArticleMutation) ClearSortID() {
	m.sort_id = nil
	m.addsort_id = nil
	m.clearedFields[article.FieldSortID] = struct{}{}
}

// SortIDCleared returns if the "sort_id" field was cleared in this mutation.
func (m *ArticleMutation) SortIDCleared() bool {
	_, ok := m.clearedFields[article.FieldSortID]
	return ok
}

// ResetSortID resets all changes to the "sort_id" field.
func (m *ArticleMutation) ResetSortID() {
	m.sort_id = nil
	m.addsort_id = nil
	delete(m.clearedFields, article.FieldSortID)
}

// SetName sets the "name" field.
func (m *ArticleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ArticleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ArticleMutation) ClearName() {
	m.name = nil
	m.clearedFields[article.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ArticleMutation) NameCleared() bool {
	_, ok := m.clearedFields[article.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ArticleMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, article.FieldName)
}

// SetCategoryID sets the "category_id" field.
func (m *ArticleMutation) SetCategoryID(i int32) {
	m.category_id = &i
	m.addcategory_id = nil
}

// CategoryID returns the value of the "category_id" field in the mutation.
func (m *ArticleMutation) CategoryID() (r int32, exists bool) {
	v := m.category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryID returns the old "category_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCategoryID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryID: %w", err)
	}
	return oldValue.CategoryID, nil
}

// AddCategoryID adds i to the "category_id" field.
func (m *ArticleMutation) AddCategoryID(i int32) {
	if m.addcategory_id != nil {
		*m.addcategory_id += i
	} else {
		m.addcategory_id = &i
	}
}

// AddedCategoryID returns the value that was added to the "category_id" field in this mutation.
func (m *ArticleMutation) AddedCategoryID() (r int32, exists bool) {
	v := m.addcategory_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCategoryID clears the value of the "category_id" field.
func (m *ArticleMutation) ClearCategoryID() {
	m.category_id = nil
	m.addcategory_id = nil
	m.clearedFields[article.FieldCategoryID] = struct{}{}
}

// CategoryIDCleared returns if the "category_id" field was cleared in this mutation.
func (m *ArticleMutation) CategoryIDCleared() bool {
	_, ok := m.clearedFields[article.FieldCategoryID]
	return ok
}

// ResetCategoryID resets all changes to the "category_id" field.
func (m *ArticleMutation) ResetCategoryID() {
	m.category_id = nil
	m.addcategory_id = nil
	delete(m.clearedFields, article.FieldCategoryID)
}

// SetRecommend sets the "recommend" field.
func (m *ArticleMutation) SetRecommend(s string) {
	m.recommend = &s
}

// Recommend returns the value of the "recommend" field in the mutation.
func (m *ArticleMutation) Recommend() (r string, exists bool) {
	v := m.recommend
	if v == nil {
		return
	}
	return *v, true
}

// OldRecommend returns the old "recommend" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldRecommend(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecommend is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecommend requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecommend: %w", err)
	}
	return oldValue.Recommend, nil
}

// ClearRecommend clears the value of the "recommend" field.
func (m *ArticleMutation) ClearRecommend() {
	m.recommend = nil
	m.clearedFields[article.FieldRecommend] = struct{}{}
}

// RecommendCleared returns if the "recommend" field was cleared in this mutation.
func (m *ArticleMutation) RecommendCleared() bool {
	_, ok := m.clearedFields[article.FieldRecommend]
	return ok
}

// ResetRecommend resets all changes to the "recommend" field.
func (m *ArticleMutation) ResetRecommend() {
	m.recommend = nil
	delete(m.clearedFields, article.FieldRecommend)
}

// SetDescription sets the "description" field.
func (m *ArticleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ArticleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *ArticleMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[article.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *ArticleMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[article.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *ArticleMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, article.FieldDescription)
}

// SetContentBody sets the "content_body" field.
func (m *ArticleMutation) SetContentBody(s string) {
	m.content_body = &s
}

// ContentBody returns the value of the "content_body" field in the mutation.
func (m *ArticleMutation) ContentBody() (r string, exists bool) {
	v := m.content_body
	if v == nil {
		return
	}
	return *v, true
}

// OldContentBody returns the old "content_body" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldContentBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentBody: %w", err)
	}
	return oldValue.ContentBody, nil
}

// ClearContentBody clears the value of the "content_body" field.
func (m *ArticleMutation) ClearContentBody() {
	m.content_body = nil
	m.clearedFields[article.FieldContentBody] = struct{}{}
}

// ContentBodyCleared returns if the "content_body" field was cleared in this mutation.
func (m *ArticleMutation) ContentBodyCleared() bool {
	_, ok := m.clearedFields[article.FieldContentBody]
	return ok
}

// ResetContentBody resets all changes to the "content_body" field.
func (m *ArticleMutation) ResetContentBody() {
	m.content_body = nil
	delete(m.clearedFields, article.FieldContentBody)
}

// SetImageURL sets the "image_url" field.
func (m *ArticleMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *ArticleMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *ArticleMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[article.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *ArticleMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[article.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *ArticleMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, article.FieldImageURL)
}

// SetStatus sets the "status" field.
func (m *ArticleMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ArticleMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ArticleMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ArticleMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *ArticleMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[article.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *ArticleMutation) StatusCleared() bool {
	_, ok := m.clearedFields[article.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *ArticleMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, article.FieldStatus)
}

// SetClickCount sets the "click_count" field.
func (m *ArticleMutation) SetClickCount(i int32) {
	m.click_count = &i
	m.addclick_count = nil
}

// ClickCount returns the value of the "click_count" field in the mutation.
func (m *ArticleMutation) ClickCount() (r int32, exists bool) {
	v := m.click_count
	if v == nil {
		return
	}
	return *v, true
}

// OldClickCount returns the old "click_count" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldClickCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClickCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClickCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClickCount: %w", err)
	}
	return oldValue.ClickCount, nil
}

// AddClickCount adds i to the "click_count" field.
func (m *ArticleMutation) AddClickCount(i int32) {
	if m.addclick_count != nil {
		*m.addclick_count += i
	} else {
		m.addclick_count = &i
	}
}

// AddedClickCount returns the value that was added to the "click_count" field in this mutation.
func (m *ArticleMutation) AddedClickCount() (r int32, exists bool) {
	v := m.addclick_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearClickCount clears the value of the "click_count" field.
func (m *ArticleMutation) ClearClickCount() {
	m.click_count = nil
	m.addclick_count = nil
	m.clearedFields[article.FieldClickCount] = struct{}{}
}

// ClickCountCleared returns if the "click_count" field was cleared in this mutation.
func (m *ArticleMutation) ClickCountCleared() bool {
	_, ok := m.clearedFields[article.FieldClickCount]
	return ok
}

// ResetClickCount resets all changes to the "click_count" field.
func (m *ArticleMutation) ResetClickCount() {
	m.click_count = nil
	m.addclick_count = nil
	delete(m.clearedFields, article.FieldClickCount)
}

// SetLikeCount sets the "like_count" field.
func (m *ArticleMutation) SetLikeCount(i int32) {
	m.like_count = &i
	m.addlike_count = nil
}

// LikeCount returns the value of the "like_count" field in the mutation.
func (m *ArticleMutation) LikeCount() (r int32, exists bool) {
	v := m.like_count
	if v == nil {
		return
	}
	return *v, true
}

// OldLikeCount returns the old "like_count" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldLikeCount(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLikeCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLikeCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLikeCount: %w", err)
	}
	return oldValue.LikeCount, nil
}

// AddLikeCount adds i to the "like_count" field.
func (m *ArticleMutation) AddLikeCount(i int32) {
	if m.addlike_count != nil {
		*m.addlike_count += i
	} else {
		m.addlike_count = &i
	}
}

// AddedLikeCount returns the value that was added to the "like_count" field in this mutation.
func (m *ArticleMutation) AddedLikeCount() (r int32, exists bool) {
	v := m.addlike_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearLikeCount clears the value of the "like_count" field.
func (m *ArticleMutation) ClearLikeCount() {
	m.like_count = nil
	m.addlike_count = nil
	m.clearedFields[article.FieldLikeCount] = struct{}{}
}

// LikeCountCleared returns if the "like_count" field was cleared in this mutation.
func (m *ArticleMutation) LikeCountCleared() bool {
	_, ok := m.clearedFields[article.FieldLikeCount]
	return ok
}

// ResetLikeCount resets all changes to the "like_count" field.
func (m *ArticleMutation) ResetLikeCount() {
	m.like_count = nil
	m.addlike_count = nil
	delete(m.clearedFields, article.FieldLikeCount)
}

// SetCreateID sets the "create_id" field.
func (m *ArticleMutation) SetCreateID(i int64) {
	m.create_id = &i
	m.addcreate_id = nil
}

// CreateID returns the value of the "create_id" field in the mutation.
func (m *ArticleMutation) CreateID() (r int64, exists bool) {
	v := m.create_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateID returns the old "create_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCreateID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateID: %w", err)
	}
	return oldValue.CreateID, nil
}

// AddCreateID adds i to the "create_id" field.
func (m *ArticleMutation) AddCreateID(i int64) {
	if m.addcreate_id != nil {
		*m.addcreate_id += i
	} else {
		m.addcreate_id = &i
	}
}

// AddedCreateID returns the value that was added to the "create_id" field in this mutation.
func (m *ArticleMutation) AddedCreateID() (r int64, exists bool) {
	v := m.addcreate_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateID clears the value of the "create_id" field.
func (m *ArticleMutation) ClearCreateID() {
	m.create_id = nil
	m.addcreate_id = nil
	m.clearedFields[article.FieldCreateID] = struct{}{}
}

// CreateIDCleared returns if the "create_id" field was cleared in this mutation.
func (m *ArticleMutation) CreateIDCleared() bool {
	_, ok := m.clearedFields[article.FieldCreateID]
	return ok
}

// ResetCreateID resets all changes to the "create_id" field.
func (m *ArticleMutation) ResetCreateID() {
	m.create_id = nil
	m.addcreate_id = nil
	delete(m.clearedFields, article.FieldCreateID)
}

// SetCreateTime sets the "create_time" field.
func (m *ArticleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ArticleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *ArticleMutation) ClearCreateTime() {
	m.create_time = nil
	m.clearedFields[article.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *ArticleMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[article.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ArticleMutation) ResetCreateTime() {
	m.create_time = nil
	delete(m.clearedFields, article.FieldCreateTime)
}

// SetModifyID sets the "modify_id" field.
func (m *ArticleMutation) SetModifyID(i int64) {
	m.modify_id = &i
	m.addmodify_id = nil
}

// ModifyID returns the value of the "modify_id" field in the mutation.
func (m *ArticleMutation) ModifyID() (r int64, exists bool) {
	v := m.modify_id
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyID returns the old "modify_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldModifyID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyID: %w", err)
	}
	return oldValue.ModifyID, nil
}

// AddModifyID adds i to the "modify_id" field.
func (m *ArticleMutation) AddModifyID(i int64) {
	if m.addmodify_id != nil {
		*m.addmodify_id += i
	} else {
		m.addmodify_id = &i
	}
}

// AddedModifyID returns the value that was added to the "modify_id" field in this mutation.
func (m *ArticleMutation) AddedModifyID() (r int64, exists bool) {
	v := m.addmodify_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearModifyID clears the value of the "modify_id" field.
func (m *ArticleMutation) ClearModifyID() {
	m.modify_id = nil
	m.addmodify_id = nil
	m.clearedFields[article.FieldModifyID] = struct{}{}
}

// ModifyIDCleared returns if the "modify_id" field was cleared in this mutation.
func (m *ArticleMutation) ModifyIDCleared() bool {
	_, ok := m.clearedFields[article.FieldModifyID]
	return ok
}

// ResetModifyID resets all changes to the "modify_id" field.
func (m *ArticleMutation) ResetModifyID() {
	m.modify_id = nil
	m.addmodify_id = nil
	delete(m.clearedFields, article.FieldModifyID)
}

// SetModifyTime sets the "modify_time" field.
func (m *ArticleMutation) SetModifyTime(t time.Time) {
	m.modify_time = &t
}

// ModifyTime returns the value of the "modify_time" field in the mutation.
func (m *ArticleMutation) ModifyTime() (r time.Time, exists bool) {
	v := m.modify_time
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyTime returns the old "modify_time" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldModifyTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyTime: %w", err)
	}
	return oldValue.ModifyTime, nil
}

// ClearModifyTime clears the value of the "modify_time" field.
func (m *ArticleMutation) ClearModifyTime() {
	m.modify_time = nil
	m.clearedFields[article.FieldModifyTime] = struct{}{}
}

// ModifyTimeCleared returns if the "modify_time" field was cleared in this mutation.
func (m *ArticleMutation) ModifyTimeCleared() bool {
	_, ok := m.clearedFields[article.FieldModifyTime]
	return ok
}

// ResetModifyTime resets all changes to the "modify_time" field.
func (m *ArticleMutation) ResetModifyTime() {
	m.modify_time = nil
	delete(m.clearedFields, article.FieldModifyTime)
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArticleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArticleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Article, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArticleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.sort_id != nil {
		fields = append(fields, article.FieldSortID)
	}
	if m.name != nil {
		fields = append(fields, article.FieldName)
	}
	if m.category_id != nil {
		fields = append(fields, article.FieldCategoryID)
	}
	if m.recommend != nil {
		fields = append(fields, article.FieldRecommend)
	}
	if m.description != nil {
		fields = append(fields, article.FieldDescription)
	}
	if m.content_body != nil {
		fields = append(fields, article.FieldContentBody)
	}
	if m.image_url != nil {
		fields = append(fields, article.FieldImageURL)
	}
	if m.status != nil {
		fields = append(fields, article.FieldStatus)
	}
	if m.click_count != nil {
		fields = append(fields, article.FieldClickCount)
	}
	if m.like_count != nil {
		fields = append(fields, article.FieldLikeCount)
	}
	if m.create_id != nil {
		fields = append(fields, article.FieldCreateID)
	}
	if m.create_time != nil {
		fields = append(fields, article.FieldCreateTime)
	}
	if m.modify_id != nil {
		fields = append(fields, article.FieldModifyID)
	}
	if m.modify_time != nil {
		fields = append(fields, article.FieldModifyTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldSortID:
		return m.SortID()
	case article.FieldName:
		return m.Name()
	case article.FieldCategoryID:
		return m.CategoryID()
	case article.FieldRecommend:
		return m.Recommend()
	case article.FieldDescription:
		return m.Description()
	case article.FieldContentBody:
		return m.ContentBody()
	case article.FieldImageURL:
		return m.ImageURL()
	case article.FieldStatus:
		return m.Status()
	case article.FieldClickCount:
		return m.ClickCount()
	case article.FieldLikeCount:
		return m.LikeCount()
	case article.FieldCreateID:
		return m.CreateID()
	case article.FieldCreateTime:
		return m.CreateTime()
	case article.FieldModifyID:
		return m.ModifyID()
	case article.FieldModifyTime:
		return m.ModifyTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldSortID:
		return m.OldSortID(ctx)
	case article.FieldName:
		return m.OldName(ctx)
	case article.FieldCategoryID:
		return m.OldCategoryID(ctx)
	case article.FieldRecommend:
		return m.OldRecommend(ctx)
	case article.FieldDescription:
		return m.OldDescription(ctx)
	case article.FieldContentBody:
		return m.OldContentBody(ctx)
	case article.FieldImageURL:
		return m.OldImageURL(ctx)
	case article.FieldStatus:
		return m.OldStatus(ctx)
	case article.FieldClickCount:
		return m.OldClickCount(ctx)
	case article.FieldLikeCount:
		return m.OldLikeCount(ctx)
	case article.FieldCreateID:
		return m.OldCreateID(ctx)
	case article.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case article.FieldModifyID:
		return m.OldModifyID(ctx)
	case article.FieldModifyTime:
		return m.OldModifyTime(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldSortID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortID(v)
		return nil
	case article.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case article.FieldCategoryID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryID(v)
		return nil
	case article.FieldRecommend:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecommend(v)
		return nil
	case article.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case article.FieldContentBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentBody(v)
		return nil
	case article.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case article.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case article.FieldClickCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClickCount(v)
		return nil
	case article.FieldLikeCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLikeCount(v)
		return nil
	case article.FieldCreateID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateID(v)
		return nil
	case article.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case article.FieldModifyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyID(v)
		return nil
	case article.FieldModifyTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyTime(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	var fields []string
	if m.addsort_id != nil {
		fields = append(fields, article.FieldSortID)
	}
	if m.addcategory_id != nil {
		fields = append(fields, article.FieldCategoryID)
	}
	if m.addstatus != nil {
		fields = append(fields, article.FieldStatus)
	}
	if m.addclick_count != nil {
		fields = append(fields, article.FieldClickCount)
	}
	if m.addlike_count != nil {
		fields = append(fields, article.FieldLikeCount)
	}
	if m.addcreate_id != nil {
		fields = append(fields, article.FieldCreateID)
	}
	if m.addmodify_id != nil {
		fields = append(fields, article.FieldModifyID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case article.FieldSortID:
		return m.AddedSortID()
	case article.FieldCategoryID:
		return m.AddedCategoryID()
	case article.FieldStatus:
		return m.AddedStatus()
	case article.FieldClickCount:
		return m.AddedClickCount()
	case article.FieldLikeCount:
		return m.AddedLikeCount()
	case article.FieldCreateID:
		return m.AddedCreateID()
	case article.FieldModifyID:
		return m.AddedModifyID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case article.FieldSortID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortID(v)
		return nil
	case article.FieldCategoryID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategoryID(v)
		return nil
	case article.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case article.FieldClickCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddClickCount(v)
		return nil
	case article.FieldLikeCount:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLikeCount(v)
		return nil
	case article.FieldCreateID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateID(v)
		return nil
	case article.FieldModifyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModifyID(v)
		return nil
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(article.FieldSortID) {
		fields = append(fields, article.FieldSortID)
	}
	if m.FieldCleared(article.FieldName) {
		fields = append(fields, article.FieldName)
	}
	if m.FieldCleared(article.FieldCategoryID) {
		fields = append(fields, article.FieldCategoryID)
	}
	if m.FieldCleared(article.FieldRecommend) {
		fields = append(fields, article.FieldRecommend)
	}
	if m.FieldCleared(article.FieldDescription) {
		fields = append(fields, article.FieldDescription)
	}
	if m.FieldCleared(article.FieldContentBody) {
		fields = append(fields, article.FieldContentBody)
	}
	if m.FieldCleared(article.FieldImageURL) {
		fields = append(fields, article.FieldImageURL)
	}
	if m.FieldCleared(article.FieldStatus) {
		fields = append(fields, article.FieldStatus)
	}
	if m.FieldCleared(article.FieldClickCount) {
		fields = append(fields, article.FieldClickCount)
	}
	if m.FieldCleared(article.FieldLikeCount) {
		fields = append(fields, article.FieldLikeCount)
	}
	if m.FieldCleared(article.FieldCreateID) {
		fields = append(fields, article.FieldCreateID)
	}
	if m.FieldCleared(article.FieldCreateTime) {
		fields = append(fields, article.FieldCreateTime)
	}
	if m.FieldCleared(article.FieldModifyID) {
		fields = append(fields, article.FieldModifyID)
	}
	if m.FieldCleared(article.FieldModifyTime) {
		fields = append(fields, article.FieldModifyTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	switch name {
	case article.FieldSortID:
		m.ClearSortID()
		return nil
	case article.FieldName:
		m.ClearName()
		return nil
	case article.FieldCategoryID:
		m.ClearCategoryID()
		return nil
	case article.FieldRecommend:
		m.ClearRecommend()
		return nil
	case article.FieldDescription:
		m.ClearDescription()
		return nil
	case article.FieldContentBody:
		m.ClearContentBody()
		return nil
	case article.FieldImageURL:
		m.ClearImageURL()
		return nil
	case article.FieldStatus:
		m.ClearStatus()
		return nil
	case article.FieldClickCount:
		m.ClearClickCount()
		return nil
	case article.FieldLikeCount:
		m.ClearLikeCount()
		return nil
	case article.FieldCreateID:
		m.ClearCreateID()
		return nil
	case article.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case article.FieldModifyID:
		m.ClearModifyID()
		return nil
	case article.FieldModifyTime:
		m.ClearModifyTime()
		return nil
	}
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldSortID:
		m.ResetSortID()
		return nil
	case article.FieldName:
		m.ResetName()
		return nil
	case article.FieldCategoryID:
		m.ResetCategoryID()
		return nil
	case article.FieldRecommend:
		m.ResetRecommend()
		return nil
	case article.FieldDescription:
		m.ResetDescription()
		return nil
	case article.FieldContentBody:
		m.ResetContentBody()
		return nil
	case article.FieldImageURL:
		m.ResetImageURL()
		return nil
	case article.FieldStatus:
		m.ResetStatus()
		return nil
	case article.FieldClickCount:
		m.ResetClickCount()
		return nil
	case article.FieldLikeCount:
		m.ResetLikeCount()
		return nil
	case article.FieldCreateID:
		m.ResetCreateID()
		return nil
	case article.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case article.FieldModifyID:
		m.ResetModifyID()
		return nil
	case article.FieldModifyTime:
		m.ResetModifyTime()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Article edge %s", name)
}

// WebsiteMutation represents an operation that mutates the Website nodes in the graph.
type WebsiteMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	sort_id       *int32
	addsort_id    *int32
	category      *int32
	addcategory   *int32
	_type         *int32
	add_type      *int32
	website_name  *string
	website_icon  *string
	website_url   *string
	summary       *string
	description   *string
	create_id     *int64
	addcreate_id  *int64
	create_time   *time.Time
	modify_id     *int64
	addmodify_id  *int64
	modify_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Website, error)
	predicates    []predicate.Website
}

var _ ent.Mutation = (*WebsiteMutation)(nil)

// websiteOption allows management of the mutation configuration using functional options.
type websiteOption func(*WebsiteMutation)

// newWebsiteMutation creates new mutation for the Website entity.
func newWebsiteMutation(c config, op Op, opts ...websiteOption) *WebsiteMutation {
	m := &WebsiteMutation{
		config:        c,
		op:            op,
		typ:           TypeWebsite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebsiteID sets the ID field of the mutation.
func withWebsiteID(id int64) websiteOption {
	return func(m *WebsiteMutation) {
		var (
			err   error
			once  sync.Once
			value *Website
		)
		m.oldValue = func(ctx context.Context) (*Website, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Website.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebsite sets the old Website of the mutation.
func withWebsite(node *Website) websiteOption {
	return func(m *WebsiteMutation) {
		m.oldValue = func(context.Context) (*Website, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebsiteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebsiteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Website entities.
func (m *WebsiteMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebsiteMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebsiteMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Website.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSortID sets the "sort_id" field.
func (m *WebsiteMutation) SetSortID(i int32) {
	m.sort_id = &i
	m.addsort_id = nil
}

// SortID returns the value of the "sort_id" field in the mutation.
func (m *WebsiteMutation) SortID() (r int32, exists bool) {
	v := m.sort_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSortID returns the old "sort_id" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldSortID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortID: %w", err)
	}
	return oldValue.SortID, nil
}

// AddSortID adds i to the "sort_id" field.
func (m *WebsiteMutation) AddSortID(i int32) {
	if m.addsort_id != nil {
		*m.addsort_id += i
	} else {
		m.addsort_id = &i
	}
}

// AddedSortID returns the value that was added to the "sort_id" field in this mutation.
func (m *WebsiteMutation) AddedSortID() (r int32, exists bool) {
	v := m.addsort_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortID clears the value of the "sort_id" field.
func (m *WebsiteMutation) ClearSortID() {
	m.sort_id = nil
	m.addsort_id = nil
	m.clearedFields[website.FieldSortID] = struct{}{}
}

// SortIDCleared returns if the "sort_id" field was cleared in this mutation.
func (m *WebsiteMutation) SortIDCleared() bool {
	_, ok := m.clearedFields[website.FieldSortID]
	return ok
}

// ResetSortID resets all changes to the "sort_id" field.
func (m *WebsiteMutation) ResetSortID() {
	m.sort_id = nil
	m.addsort_id = nil
	delete(m.clearedFields, website.FieldSortID)
}

// SetCategory sets the "category" field.
func (m *WebsiteMutation) SetCategory(i int32) {
	m.category = &i
	m.addcategory = nil
}

// Category returns the value of the "category" field in the mutation.
func (m *WebsiteMutation) Category() (r int32, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldCategory(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// AddCategory adds i to the "category" field.
func (m *WebsiteMutation) AddCategory(i int32) {
	if m.addcategory != nil {
		*m.addcategory += i
	} else {
		m.addcategory = &i
	}
}

// AddedCategory returns the value that was added to the "category" field in this mutation.
func (m *WebsiteMutation) AddedCategory() (r int32, exists bool) {
	v := m.addcategory
	if v == nil {
		return
	}
	return *v, true
}

// ClearCategory clears the value of the "category" field.
func (m *WebsiteMutation) ClearCategory() {
	m.category = nil
	m.addcategory = nil
	m.clearedFields[website.FieldCategory] = struct{}{}
}

// CategoryCleared returns if the "category" field was cleared in this mutation.
func (m *WebsiteMutation) CategoryCleared() bool {
	_, ok := m.clearedFields[website.FieldCategory]
	return ok
}

// ResetCategory resets all changes to the "category" field.
func (m *WebsiteMutation) ResetCategory() {
	m.category = nil
	m.addcategory = nil
	delete(m.clearedFields, website.FieldCategory)
}

// SetType sets the "type" field.
func (m *WebsiteMutation) SetType(i int32) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *WebsiteMutation) GetType() (r int32, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldType(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *WebsiteMutation) AddType(i int32) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *WebsiteMutation) AddedType() (r int32, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearType clears the value of the "type" field.
func (m *WebsiteMutation) ClearType() {
	m._type = nil
	m.add_type = nil
	m.clearedFields[website.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *WebsiteMutation) TypeCleared() bool {
	_, ok := m.clearedFields[website.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *WebsiteMutation) ResetType() {
	m._type = nil
	m.add_type = nil
	delete(m.clearedFields, website.FieldType)
}

// SetWebsiteName sets the "website_name" field.
func (m *WebsiteMutation) SetWebsiteName(s string) {
	m.website_name = &s
}

// WebsiteName returns the value of the "website_name" field in the mutation.
func (m *WebsiteMutation) WebsiteName() (r string, exists bool) {
	v := m.website_name
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteName returns the old "website_name" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldWebsiteName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteName: %w", err)
	}
	return oldValue.WebsiteName, nil
}

// ClearWebsiteName clears the value of the "website_name" field.
func (m *WebsiteMutation) ClearWebsiteName() {
	m.website_name = nil
	m.clearedFields[website.FieldWebsiteName] = struct{}{}
}

// WebsiteNameCleared returns if the "website_name" field was cleared in this mutation.
func (m *WebsiteMutation) WebsiteNameCleared() bool {
	_, ok := m.clearedFields[website.FieldWebsiteName]
	return ok
}

// ResetWebsiteName resets all changes to the "website_name" field.
func (m *WebsiteMutation) ResetWebsiteName() {
	m.website_name = nil
	delete(m.clearedFields, website.FieldWebsiteName)
}

// SetWebsiteIcon sets the "website_icon" field.
func (m *WebsiteMutation) SetWebsiteIcon(s string) {
	m.website_icon = &s
}

// WebsiteIcon returns the value of the "website_icon" field in the mutation.
func (m *WebsiteMutation) WebsiteIcon() (r string, exists bool) {
	v := m.website_icon
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteIcon returns the old "website_icon" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldWebsiteIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteIcon: %w", err)
	}
	return oldValue.WebsiteIcon, nil
}

// ClearWebsiteIcon clears the value of the "website_icon" field.
func (m *WebsiteMutation) ClearWebsiteIcon() {
	m.website_icon = nil
	m.clearedFields[website.FieldWebsiteIcon] = struct{}{}
}

// WebsiteIconCleared returns if the "website_icon" field was cleared in this mutation.
func (m *WebsiteMutation) WebsiteIconCleared() bool {
	_, ok := m.clearedFields[website.FieldWebsiteIcon]
	return ok
}

// ResetWebsiteIcon resets all changes to the "website_icon" field.
func (m *WebsiteMutation) ResetWebsiteIcon() {
	m.website_icon = nil
	delete(m.clearedFields, website.FieldWebsiteIcon)
}

// SetWebsiteURL sets the "website_url" field.
func (m *WebsiteMutation) SetWebsiteURL(s string) {
	m.website_url = &s
}

// WebsiteURL returns the value of the "website_url" field in the mutation.
func (m *WebsiteMutation) WebsiteURL() (r string, exists bool) {
	v := m.website_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteURL returns the old "website_url" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldWebsiteURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteURL: %w", err)
	}
	return oldValue.WebsiteURL, nil
}

// ClearWebsiteURL clears the value of the "website_url" field.
func (m *WebsiteMutation) ClearWebsiteURL() {
	m.website_url = nil
	m.clearedFields[website.FieldWebsiteURL] = struct{}{}
}

// WebsiteURLCleared returns if the "website_url" field was cleared in this mutation.
func (m *WebsiteMutation) WebsiteURLCleared() bool {
	_, ok := m.clearedFields[website.FieldWebsiteURL]
	return ok
}

// ResetWebsiteURL resets all changes to the "website_url" field.
func (m *WebsiteMutation) ResetWebsiteURL() {
	m.website_url = nil
	delete(m.clearedFields, website.FieldWebsiteURL)
}

// SetSummary sets the "summary" field.
func (m *WebsiteMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *WebsiteMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ClearSummary clears the value of the "summary" field.
func (m *WebsiteMutation) ClearSummary() {
	m.summary = nil
	m.clearedFields[website.FieldSummary] = struct{}{}
}

// SummaryCleared returns if the "summary" field was cleared in this mutation.
func (m *WebsiteMutation) SummaryCleared() bool {
	_, ok := m.clearedFields[website.FieldSummary]
	return ok
}

// ResetSummary resets all changes to the "summary" field.
func (m *WebsiteMutation) ResetSummary() {
	m.summary = nil
	delete(m.clearedFields, website.FieldSummary)
}

// SetDescription sets the "description" field.
func (m *WebsiteMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WebsiteMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *WebsiteMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[website.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *WebsiteMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[website.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *WebsiteMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, website.FieldDescription)
}

// SetCreateID sets the "create_id" field.
func (m *WebsiteMutation) SetCreateID(i int64) {
	m.create_id = &i
	m.addcreate_id = nil
}

// CreateID returns the value of the "create_id" field in the mutation.
func (m *WebsiteMutation) CreateID() (r int64, exists bool) {
	v := m.create_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateID returns the old "create_id" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldCreateID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateID: %w", err)
	}
	return oldValue.CreateID, nil
}

// AddCreateID adds i to the "create_id" field.
func (m *WebsiteMutation) AddCreateID(i int64) {
	if m.addcreate_id != nil {
		*m.addcreate_id += i
	} else {
		m.addcreate_id = &i
	}
}

// AddedCreateID returns the value that was added to the "create_id" field in this mutation.
func (m *WebsiteMutation) AddedCreateID() (r int64, exists bool) {
	v := m.addcreate_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateID clears the value of the "create_id" field.
func (m *WebsiteMutation) ClearCreateID() {
	m.create_id = nil
	m.addcreate_id = nil
	m.clearedFields[website.FieldCreateID] = struct{}{}
}

// CreateIDCleared returns if the "create_id" field was cleared in this mutation.
func (m *WebsiteMutation) CreateIDCleared() bool {
	_, ok := m.clearedFields[website.FieldCreateID]
	return ok
}

// ResetCreateID resets all changes to the "create_id" field.
func (m *WebsiteMutation) ResetCreateID() {
	m.create_id = nil
	m.addcreate_id = nil
	delete(m.clearedFields, website.FieldCreateID)
}

// SetCreateTime sets the "create_time" field.
func (m *WebsiteMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *WebsiteMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *WebsiteMutation) ClearCreateTime() {
	m.create_time = nil
	m.clearedFields[website.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *WebsiteMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[website.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *WebsiteMutation) ResetCreateTime() {
	m.create_time = nil
	delete(m.clearedFields, website.FieldCreateTime)
}

// SetModifyID sets the "modify_id" field.
func (m *WebsiteMutation) SetModifyID(i int64) {
	m.modify_id = &i
	m.addmodify_id = nil
}

// ModifyID returns the value of the "modify_id" field in the mutation.
func (m *WebsiteMutation) ModifyID() (r int64, exists bool) {
	v := m.modify_id
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyID returns the old "modify_id" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldModifyID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyID: %w", err)
	}
	return oldValue.ModifyID, nil
}

// AddModifyID adds i to the "modify_id" field.
func (m *WebsiteMutation) AddModifyID(i int64) {
	if m.addmodify_id != nil {
		*m.addmodify_id += i
	} else {
		m.addmodify_id = &i
	}
}

// AddedModifyID returns the value that was added to the "modify_id" field in this mutation.
func (m *WebsiteMutation) AddedModifyID() (r int64, exists bool) {
	v := m.addmodify_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearModifyID clears the value of the "modify_id" field.
func (m *WebsiteMutation) ClearModifyID() {
	m.modify_id = nil
	m.addmodify_id = nil
	m.clearedFields[website.FieldModifyID] = struct{}{}
}

// ModifyIDCleared returns if the "modify_id" field was cleared in this mutation.
func (m *WebsiteMutation) ModifyIDCleared() bool {
	_, ok := m.clearedFields[website.FieldModifyID]
	return ok
}

// ResetModifyID resets all changes to the "modify_id" field.
func (m *WebsiteMutation) ResetModifyID() {
	m.modify_id = nil
	m.addmodify_id = nil
	delete(m.clearedFields, website.FieldModifyID)
}

// SetModifyTime sets the "modify_time" field.
func (m *WebsiteMutation) SetModifyTime(t time.Time) {
	m.modify_time = &t
}

// ModifyTime returns the value of the "modify_time" field in the mutation.
func (m *WebsiteMutation) ModifyTime() (r time.Time, exists bool) {
	v := m.modify_time
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyTime returns the old "modify_time" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldModifyTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyTime: %w", err)
	}
	return oldValue.ModifyTime, nil
}

// ClearModifyTime clears the value of the "modify_time" field.
func (m *WebsiteMutation) ClearModifyTime() {
	m.modify_time = nil
	m.clearedFields[website.FieldModifyTime] = struct{}{}
}

// ModifyTimeCleared returns if the "modify_time" field was cleared in this mutation.
func (m *WebsiteMutation) ModifyTimeCleared() bool {
	_, ok := m.clearedFields[website.FieldModifyTime]
	return ok
}

// ResetModifyTime resets all changes to the "modify_time" field.
func (m *WebsiteMutation) ResetModifyTime() {
	m.modify_time = nil
	delete(m.clearedFields, website.FieldModifyTime)
}

// Where appends a list predicates to the WebsiteMutation builder.
func (m *WebsiteMutation) Where(ps ...predicate.Website) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebsiteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebsiteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Website, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebsiteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebsiteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Website).
func (m *WebsiteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebsiteMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.sort_id != nil {
		fields = append(fields, website.FieldSortID)
	}
	if m.category != nil {
		fields = append(fields, website.FieldCategory)
	}
	if m._type != nil {
		fields = append(fields, website.FieldType)
	}
	if m.website_name != nil {
		fields = append(fields, website.FieldWebsiteName)
	}
	if m.website_icon != nil {
		fields = append(fields, website.FieldWebsiteIcon)
	}
	if m.website_url != nil {
		fields = append(fields, website.FieldWebsiteURL)
	}
	if m.summary != nil {
		fields = append(fields, website.FieldSummary)
	}
	if m.description != nil {
		fields = append(fields, website.FieldDescription)
	}
	if m.create_id != nil {
		fields = append(fields, website.FieldCreateID)
	}
	if m.create_time != nil {
		fields = append(fields, website.FieldCreateTime)
	}
	if m.modify_id != nil {
		fields = append(fields, website.FieldModifyID)
	}
	if m.modify_time != nil {
		fields = append(fields, website.FieldModifyTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebsiteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case website.FieldSortID:
		return m.SortID()
	case website.FieldCategory:
		return m.Category()
	case website.FieldType:
		return m.GetType()
	case website.FieldWebsiteName:
		return m.WebsiteName()
	case website.FieldWebsiteIcon:
		return m.WebsiteIcon()
	case website.FieldWebsiteURL:
		return m.WebsiteURL()
	case website.FieldSummary:
		return m.Summary()
	case website.FieldDescription:
		return m.Description()
	case website.FieldCreateID:
		return m.CreateID()
	case website.FieldCreateTime:
		return m.CreateTime()
	case website.FieldModifyID:
		return m.ModifyID()
	case website.FieldModifyTime:
		return m.ModifyTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebsiteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case website.FieldSortID:
		return m.OldSortID(ctx)
	case website.FieldCategory:
		return m.OldCategory(ctx)
	case website.FieldType:
		return m.OldType(ctx)
	case website.FieldWebsiteName:
		return m.OldWebsiteName(ctx)
	case website.FieldWebsiteIcon:
		return m.OldWebsiteIcon(ctx)
	case website.FieldWebsiteURL:
		return m.OldWebsiteURL(ctx)
	case website.FieldSummary:
		return m.OldSummary(ctx)
	case website.FieldDescription:
		return m.OldDescription(ctx)
	case website.FieldCreateID:
		return m.OldCreateID(ctx)
	case website.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case website.FieldModifyID:
		return m.OldModifyID(ctx)
	case website.FieldModifyTime:
		return m.OldModifyTime(ctx)
	}
	return nil, fmt.Errorf("unknown Website field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case website.FieldSortID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortID(v)
		return nil
	case website.FieldCategory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case website.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case website.FieldWebsiteName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteName(v)
		return nil
	case website.FieldWebsiteIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteIcon(v)
		return nil
	case website.FieldWebsiteURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteURL(v)
		return nil
	case website.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case website.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case website.FieldCreateID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateID(v)
		return nil
	case website.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case website.FieldModifyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyID(v)
		return nil
	case website.FieldModifyTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyTime(v)
		return nil
	}
	return fmt.Errorf("unknown Website field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebsiteMutation) AddedFields() []string {
	var fields []string
	if m.addsort_id != nil {
		fields = append(fields, website.FieldSortID)
	}
	if m.addcategory != nil {
		fields = append(fields, website.FieldCategory)
	}
	if m.add_type != nil {
		fields = append(fields, website.FieldType)
	}
	if m.addcreate_id != nil {
		fields = append(fields, website.FieldCreateID)
	}
	if m.addmodify_id != nil {
		fields = append(fields, website.FieldModifyID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebsiteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case website.FieldSortID:
		return m.AddedSortID()
	case website.FieldCategory:
		return m.AddedCategory()
	case website.FieldType:
		return m.AddedType()
	case website.FieldCreateID:
		return m.AddedCreateID()
	case website.FieldModifyID:
		return m.AddedModifyID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case website.FieldSortID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortID(v)
		return nil
	case website.FieldCategory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategory(v)
		return nil
	case website.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case website.FieldCreateID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateID(v)
		return nil
	case website.FieldModifyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModifyID(v)
		return nil
	}
	return fmt.Errorf("unknown Website numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebsiteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(website.FieldSortID) {
		fields = append(fields, website.FieldSortID)
	}
	if m.FieldCleared(website.FieldCategory) {
		fields = append(fields, website.FieldCategory)
	}
	if m.FieldCleared(website.FieldType) {
		fields = append(fields, website.FieldType)
	}
	if m.FieldCleared(website.FieldWebsiteName) {
		fields = append(fields, website.FieldWebsiteName)
	}
	if m.FieldCleared(website.FieldWebsiteIcon) {
		fields = append(fields, website.FieldWebsiteIcon)
	}
	if m.FieldCleared(website.FieldWebsiteURL) {
		fields = append(fields, website.FieldWebsiteURL)
	}
	if m.FieldCleared(website.FieldSummary) {
		fields = append(fields, website.FieldSummary)
	}
	if m.FieldCleared(website.FieldDescription) {
		fields = append(fields, website.FieldDescription)
	}
	if m.FieldCleared(website.FieldCreateID) {
		fields = append(fields, website.FieldCreateID)
	}
	if m.FieldCleared(website.FieldCreateTime) {
		fields = append(fields, website.FieldCreateTime)
	}
	if m.FieldCleared(website.FieldModifyID) {
		fields = append(fields, website.FieldModifyID)
	}
	if m.FieldCleared(website.FieldModifyTime) {
		fields = append(fields, website.FieldModifyTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebsiteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebsiteMutation) ClearField(name string) error {
	switch name {
	case website.FieldSortID:
		m.ClearSortID()
		return nil
	case website.FieldCategory:
		m.ClearCategory()
		return nil
	case website.FieldType:
		m.ClearType()
		return nil
	case website.FieldWebsiteName:
		m.ClearWebsiteName()
		return nil
	case website.FieldWebsiteIcon:
		m.ClearWebsiteIcon()
		return nil
	case website.FieldWebsiteURL:
		m.ClearWebsiteURL()
		return nil
	case website.FieldSummary:
		m.ClearSummary()
		return nil
	case website.FieldDescription:
		m.ClearDescription()
		return nil
	case website.FieldCreateID:
		m.ClearCreateID()
		return nil
	case website.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case website.FieldModifyID:
		m.ClearModifyID()
		return nil
	case website.FieldModifyTime:
		m.ClearModifyTime()
		return nil
	}
	return fmt.Errorf("unknown Website nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebsiteMutation) ResetField(name string) error {
	switch name {
	case website.FieldSortID:
		m.ResetSortID()
		return nil
	case website.FieldCategory:
		m.ResetCategory()
		return nil
	case website.FieldType:
		m.ResetType()
		return nil
	case website.FieldWebsiteName:
		m.ResetWebsiteName()
		return nil
	case website.FieldWebsiteIcon:
		m.ResetWebsiteIcon()
		return nil
	case website.FieldWebsiteURL:
		m.ResetWebsiteURL()
		return nil
	case website.FieldSummary:
		m.ResetSummary()
		return nil
	case website.FieldDescription:
		m.ResetDescription()
		return nil
	case website.FieldCreateID:
		m.ResetCreateID()
		return nil
	case website.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case website.FieldModifyID:
		m.ResetModifyID()
		return nil
	case website.FieldModifyTime:
		m.ResetModifyTime()
		return nil
	}
	return fmt.Errorf("unknown Website field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebsiteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebsiteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebsiteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebsiteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebsiteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebsiteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebsiteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Website unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebsiteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Website edge %s", name)
}

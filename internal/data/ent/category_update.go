// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-server/internal/data/ent/category"
	"go-server/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CategoryUpdate is the builder for updating Category entities.
type CategoryUpdate struct {
	config
	hooks    []Hook
	mutation *CategoryMutation
}

// Where appends a list predicates to the CategoryUpdate builder.
func (cu *CategoryUpdate) Where(ps ...predicate.Category) *CategoryUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetParentID sets the "parent_id" field.
func (cu *CategoryUpdate) SetParentID(i int64) *CategoryUpdate {
	cu.mutation.ResetParentID()
	cu.mutation.SetParentID(i)
	return cu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableParentID(i *int64) *CategoryUpdate {
	if i != nil {
		cu.SetParentID(*i)
	}
	return cu
}

// AddParentID adds i to the "parent_id" field.
func (cu *CategoryUpdate) AddParentID(i int64) *CategoryUpdate {
	cu.mutation.AddParentID(i)
	return cu
}

// ClearParentID clears the value of the "parent_id" field.
func (cu *CategoryUpdate) ClearParentID() *CategoryUpdate {
	cu.mutation.ClearParentID()
	return cu
}

// SetCategoryID sets the "category_id" field.
func (cu *CategoryUpdate) SetCategoryID(i int32) *CategoryUpdate {
	cu.mutation.ResetCategoryID()
	cu.mutation.SetCategoryID(i)
	return cu
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableCategoryID(i *int32) *CategoryUpdate {
	if i != nil {
		cu.SetCategoryID(*i)
	}
	return cu
}

// AddCategoryID adds i to the "category_id" field.
func (cu *CategoryUpdate) AddCategoryID(i int32) *CategoryUpdate {
	cu.mutation.AddCategoryID(i)
	return cu
}

// ClearCategoryID clears the value of the "category_id" field.
func (cu *CategoryUpdate) ClearCategoryID() *CategoryUpdate {
	cu.mutation.ClearCategoryID()
	return cu
}

// SetCategoryName sets the "category_name" field.
func (cu *CategoryUpdate) SetCategoryName(s string) *CategoryUpdate {
	cu.mutation.SetCategoryName(s)
	return cu
}

// SetNillableCategoryName sets the "category_name" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableCategoryName(s *string) *CategoryUpdate {
	if s != nil {
		cu.SetCategoryName(*s)
	}
	return cu
}

// ClearCategoryName clears the value of the "category_name" field.
func (cu *CategoryUpdate) ClearCategoryName() *CategoryUpdate {
	cu.mutation.ClearCategoryName()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CategoryUpdate) SetStatus(i int32) *CategoryUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableStatus(i *int32) *CategoryUpdate {
	if i != nil {
		cu.SetStatus(*i)
	}
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *CategoryUpdate) AddStatus(i int32) *CategoryUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// ClearStatus clears the value of the "status" field.
func (cu *CategoryUpdate) ClearStatus() *CategoryUpdate {
	cu.mutation.ClearStatus()
	return cu
}

// SetCreateID sets the "create_id" field.
func (cu *CategoryUpdate) SetCreateID(i int64) *CategoryUpdate {
	cu.mutation.ResetCreateID()
	cu.mutation.SetCreateID(i)
	return cu
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableCreateID(i *int64) *CategoryUpdate {
	if i != nil {
		cu.SetCreateID(*i)
	}
	return cu
}

// AddCreateID adds i to the "create_id" field.
func (cu *CategoryUpdate) AddCreateID(i int64) *CategoryUpdate {
	cu.mutation.AddCreateID(i)
	return cu
}

// ClearCreateID clears the value of the "create_id" field.
func (cu *CategoryUpdate) ClearCreateID() *CategoryUpdate {
	cu.mutation.ClearCreateID()
	return cu
}

// SetCreateTime sets the "create_time" field.
func (cu *CategoryUpdate) SetCreateTime(t time.Time) *CategoryUpdate {
	cu.mutation.SetCreateTime(t)
	return cu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableCreateTime(t *time.Time) *CategoryUpdate {
	if t != nil {
		cu.SetCreateTime(*t)
	}
	return cu
}

// ClearCreateTime clears the value of the "create_time" field.
func (cu *CategoryUpdate) ClearCreateTime() *CategoryUpdate {
	cu.mutation.ClearCreateTime()
	return cu
}

// SetModifyID sets the "modify_id" field.
func (cu *CategoryUpdate) SetModifyID(i int64) *CategoryUpdate {
	cu.mutation.ResetModifyID()
	cu.mutation.SetModifyID(i)
	return cu
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (cu *CategoryUpdate) SetNillableModifyID(i *int64) *CategoryUpdate {
	if i != nil {
		cu.SetModifyID(*i)
	}
	return cu
}

// AddModifyID adds i to the "modify_id" field.
func (cu *CategoryUpdate) AddModifyID(i int64) *CategoryUpdate {
	cu.mutation.AddModifyID(i)
	return cu
}

// ClearModifyID clears the value of the "modify_id" field.
func (cu *CategoryUpdate) ClearModifyID() *CategoryUpdate {
	cu.mutation.ClearModifyID()
	return cu
}

// SetModifyTime sets the "modify_time" field.
func (cu *CategoryUpdate) SetModifyTime(t time.Time) *CategoryUpdate {
	cu.mutation.SetModifyTime(t)
	return cu
}

// ClearModifyTime clears the value of the "modify_time" field.
func (cu *CategoryUpdate) ClearModifyTime() *CategoryUpdate {
	cu.mutation.ClearModifyTime()
	return cu
}

// Mutation returns the CategoryMutation object of the builder.
func (cu *CategoryUpdate) Mutation() *CategoryMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CategoryUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks[int, CategoryMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CategoryUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CategoryUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CategoryUpdate) defaults() {
	if _, ok := cu.mutation.ModifyTime(); !ok && !cu.mutation.ModifyTimeCleared() {
		v := category.UpdateDefaultModifyTime()
		cu.mutation.SetModifyTime(v)
	}
}

func (cu *CategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ParentID(); ok {
		_spec.SetField(category.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedParentID(); ok {
		_spec.AddField(category.FieldParentID, field.TypeInt64, value)
	}
	if cu.mutation.ParentIDCleared() {
		_spec.ClearField(category.FieldParentID, field.TypeInt64)
	}
	if value, ok := cu.mutation.CategoryID(); ok {
		_spec.SetField(category.FieldCategoryID, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedCategoryID(); ok {
		_spec.AddField(category.FieldCategoryID, field.TypeInt32, value)
	}
	if cu.mutation.CategoryIDCleared() {
		_spec.ClearField(category.FieldCategoryID, field.TypeInt32)
	}
	if value, ok := cu.mutation.CategoryName(); ok {
		_spec.SetField(category.FieldCategoryName, field.TypeString, value)
	}
	if cu.mutation.CategoryNameCleared() {
		_spec.ClearField(category.FieldCategoryName, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(category.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(category.FieldStatus, field.TypeInt32, value)
	}
	if cu.mutation.StatusCleared() {
		_spec.ClearField(category.FieldStatus, field.TypeInt32)
	}
	if value, ok := cu.mutation.CreateID(); ok {
		_spec.SetField(category.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCreateID(); ok {
		_spec.AddField(category.FieldCreateID, field.TypeInt64, value)
	}
	if cu.mutation.CreateIDCleared() {
		_spec.ClearField(category.FieldCreateID, field.TypeInt64)
	}
	if value, ok := cu.mutation.CreateTime(); ok {
		_spec.SetField(category.FieldCreateTime, field.TypeTime, value)
	}
	if cu.mutation.CreateTimeCleared() {
		_spec.ClearField(category.FieldCreateTime, field.TypeTime)
	}
	if value, ok := cu.mutation.ModifyID(); ok {
		_spec.SetField(category.FieldModifyID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedModifyID(); ok {
		_spec.AddField(category.FieldModifyID, field.TypeInt64, value)
	}
	if cu.mutation.ModifyIDCleared() {
		_spec.ClearField(category.FieldModifyID, field.TypeInt64)
	}
	if value, ok := cu.mutation.ModifyTime(); ok {
		_spec.SetField(category.FieldModifyTime, field.TypeTime, value)
	}
	if cu.mutation.ModifyTimeCleared() {
		_spec.ClearField(category.FieldModifyTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CategoryUpdateOne is the builder for updating a single Category entity.
type CategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CategoryMutation
}

// SetParentID sets the "parent_id" field.
func (cuo *CategoryUpdateOne) SetParentID(i int64) *CategoryUpdateOne {
	cuo.mutation.ResetParentID()
	cuo.mutation.SetParentID(i)
	return cuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableParentID(i *int64) *CategoryUpdateOne {
	if i != nil {
		cuo.SetParentID(*i)
	}
	return cuo
}

// AddParentID adds i to the "parent_id" field.
func (cuo *CategoryUpdateOne) AddParentID(i int64) *CategoryUpdateOne {
	cuo.mutation.AddParentID(i)
	return cuo
}

// ClearParentID clears the value of the "parent_id" field.
func (cuo *CategoryUpdateOne) ClearParentID() *CategoryUpdateOne {
	cuo.mutation.ClearParentID()
	return cuo
}

// SetCategoryID sets the "category_id" field.
func (cuo *CategoryUpdateOne) SetCategoryID(i int32) *CategoryUpdateOne {
	cuo.mutation.ResetCategoryID()
	cuo.mutation.SetCategoryID(i)
	return cuo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableCategoryID(i *int32) *CategoryUpdateOne {
	if i != nil {
		cuo.SetCategoryID(*i)
	}
	return cuo
}

// AddCategoryID adds i to the "category_id" field.
func (cuo *CategoryUpdateOne) AddCategoryID(i int32) *CategoryUpdateOne {
	cuo.mutation.AddCategoryID(i)
	return cuo
}

// ClearCategoryID clears the value of the "category_id" field.
func (cuo *CategoryUpdateOne) ClearCategoryID() *CategoryUpdateOne {
	cuo.mutation.ClearCategoryID()
	return cuo
}

// SetCategoryName sets the "category_name" field.
func (cuo *CategoryUpdateOne) SetCategoryName(s string) *CategoryUpdateOne {
	cuo.mutation.SetCategoryName(s)
	return cuo
}

// SetNillableCategoryName sets the "category_name" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableCategoryName(s *string) *CategoryUpdateOne {
	if s != nil {
		cuo.SetCategoryName(*s)
	}
	return cuo
}

// ClearCategoryName clears the value of the "category_name" field.
func (cuo *CategoryUpdateOne) ClearCategoryName() *CategoryUpdateOne {
	cuo.mutation.ClearCategoryName()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CategoryUpdateOne) SetStatus(i int32) *CategoryUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableStatus(i *int32) *CategoryUpdateOne {
	if i != nil {
		cuo.SetStatus(*i)
	}
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *CategoryUpdateOne) AddStatus(i int32) *CategoryUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// ClearStatus clears the value of the "status" field.
func (cuo *CategoryUpdateOne) ClearStatus() *CategoryUpdateOne {
	cuo.mutation.ClearStatus()
	return cuo
}

// SetCreateID sets the "create_id" field.
func (cuo *CategoryUpdateOne) SetCreateID(i int64) *CategoryUpdateOne {
	cuo.mutation.ResetCreateID()
	cuo.mutation.SetCreateID(i)
	return cuo
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableCreateID(i *int64) *CategoryUpdateOne {
	if i != nil {
		cuo.SetCreateID(*i)
	}
	return cuo
}

// AddCreateID adds i to the "create_id" field.
func (cuo *CategoryUpdateOne) AddCreateID(i int64) *CategoryUpdateOne {
	cuo.mutation.AddCreateID(i)
	return cuo
}

// ClearCreateID clears the value of the "create_id" field.
func (cuo *CategoryUpdateOne) ClearCreateID() *CategoryUpdateOne {
	cuo.mutation.ClearCreateID()
	return cuo
}

// SetCreateTime sets the "create_time" field.
func (cuo *CategoryUpdateOne) SetCreateTime(t time.Time) *CategoryUpdateOne {
	cuo.mutation.SetCreateTime(t)
	return cuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableCreateTime(t *time.Time) *CategoryUpdateOne {
	if t != nil {
		cuo.SetCreateTime(*t)
	}
	return cuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (cuo *CategoryUpdateOne) ClearCreateTime() *CategoryUpdateOne {
	cuo.mutation.ClearCreateTime()
	return cuo
}

// SetModifyID sets the "modify_id" field.
func (cuo *CategoryUpdateOne) SetModifyID(i int64) *CategoryUpdateOne {
	cuo.mutation.ResetModifyID()
	cuo.mutation.SetModifyID(i)
	return cuo
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (cuo *CategoryUpdateOne) SetNillableModifyID(i *int64) *CategoryUpdateOne {
	if i != nil {
		cuo.SetModifyID(*i)
	}
	return cuo
}

// AddModifyID adds i to the "modify_id" field.
func (cuo *CategoryUpdateOne) AddModifyID(i int64) *CategoryUpdateOne {
	cuo.mutation.AddModifyID(i)
	return cuo
}

// ClearModifyID clears the value of the "modify_id" field.
func (cuo *CategoryUpdateOne) ClearModifyID() *CategoryUpdateOne {
	cuo.mutation.ClearModifyID()
	return cuo
}

// SetModifyTime sets the "modify_time" field.
func (cuo *CategoryUpdateOne) SetModifyTime(t time.Time) *CategoryUpdateOne {
	cuo.mutation.SetModifyTime(t)
	return cuo
}

// ClearModifyTime clears the value of the "modify_time" field.
func (cuo *CategoryUpdateOne) ClearModifyTime() *CategoryUpdateOne {
	cuo.mutation.ClearModifyTime()
	return cuo
}

// Mutation returns the CategoryMutation object of the builder.
func (cuo *CategoryUpdateOne) Mutation() *CategoryMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CategoryUpdate builder.
func (cuo *CategoryUpdateOne) Where(ps ...predicate.Category) *CategoryUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CategoryUpdateOne) Select(field string, fields ...string) *CategoryUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Category entity.
func (cuo *CategoryUpdateOne) Save(ctx context.Context) (*Category, error) {
	cuo.defaults()
	return withHooks[*Category, CategoryMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CategoryUpdateOne) SaveX(ctx context.Context) *Category {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CategoryUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CategoryUpdateOne) defaults() {
	if _, ok := cuo.mutation.ModifyTime(); !ok && !cuo.mutation.ModifyTimeCleared() {
		v := category.UpdateDefaultModifyTime()
		cuo.mutation.SetModifyTime(v)
	}
}

func (cuo *CategoryUpdateOne) sqlSave(ctx context.Context) (_node *Category, err error) {
	_spec := sqlgraph.NewUpdateSpec(category.Table, category.Columns, sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Category.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, category.FieldID)
		for _, f := range fields {
			if !category.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != category.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ParentID(); ok {
		_spec.SetField(category.FieldParentID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedParentID(); ok {
		_spec.AddField(category.FieldParentID, field.TypeInt64, value)
	}
	if cuo.mutation.ParentIDCleared() {
		_spec.ClearField(category.FieldParentID, field.TypeInt64)
	}
	if value, ok := cuo.mutation.CategoryID(); ok {
		_spec.SetField(category.FieldCategoryID, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedCategoryID(); ok {
		_spec.AddField(category.FieldCategoryID, field.TypeInt32, value)
	}
	if cuo.mutation.CategoryIDCleared() {
		_spec.ClearField(category.FieldCategoryID, field.TypeInt32)
	}
	if value, ok := cuo.mutation.CategoryName(); ok {
		_spec.SetField(category.FieldCategoryName, field.TypeString, value)
	}
	if cuo.mutation.CategoryNameCleared() {
		_spec.ClearField(category.FieldCategoryName, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(category.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(category.FieldStatus, field.TypeInt32, value)
	}
	if cuo.mutation.StatusCleared() {
		_spec.ClearField(category.FieldStatus, field.TypeInt32)
	}
	if value, ok := cuo.mutation.CreateID(); ok {
		_spec.SetField(category.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCreateID(); ok {
		_spec.AddField(category.FieldCreateID, field.TypeInt64, value)
	}
	if cuo.mutation.CreateIDCleared() {
		_spec.ClearField(category.FieldCreateID, field.TypeInt64)
	}
	if value, ok := cuo.mutation.CreateTime(); ok {
		_spec.SetField(category.FieldCreateTime, field.TypeTime, value)
	}
	if cuo.mutation.CreateTimeCleared() {
		_spec.ClearField(category.FieldCreateTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.ModifyID(); ok {
		_spec.SetField(category.FieldModifyID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedModifyID(); ok {
		_spec.AddField(category.FieldModifyID, field.TypeInt64, value)
	}
	if cuo.mutation.ModifyIDCleared() {
		_spec.ClearField(category.FieldModifyID, field.TypeInt64)
	}
	if value, ok := cuo.mutation.ModifyTime(); ok {
		_spec.SetField(category.FieldModifyTime, field.TypeTime, value)
	}
	if cuo.mutation.ModifyTimeCleared() {
		_spec.ClearField(category.FieldModifyTime, field.TypeTime)
	}
	_node = &Category{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{category.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}

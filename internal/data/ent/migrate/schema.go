// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// SAccountColumns holds the columns for the "s_account" table.
	SAccountColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "account", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(32)"}},
		{Name: "pwd", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(32)"}},
		{Name: "nickname", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(32)"}},
		{Name: "email", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(50)"}},
		{Name: "mobile", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(30)"}},
		{Name: "create_id", Type: field.TypeInt64, Nullable: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "create_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "modify_id", Type: field.TypeInt64, Nullable: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "modify_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// SAccountTable holds the schema information for the "s_account" table.
	SAccountTable = &schema.Table{
		Name:       "s_account",
		Columns:    SAccountColumns,
		PrimaryKey: []*schema.Column{SAccountColumns[0]},
	}
	// CArticleColumns holds the columns for the "c_article" table.
	CArticleColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt32, Increment: true, SchemaType: map[string]string{"mysql": "int(20)"}},
		{Name: "sort_id", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(2)"}},
		{Name: "name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(200)"}},
		{Name: "category_id", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(20)"}},
		{Name: "recommend", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "content_body", Type: field.TypeString, Nullable: true, Size: 2147483647, SchemaType: map[string]string{"mysql": "longtext"}},
		{Name: "image_url", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(200)"}},
		{Name: "status", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(2)"}},
		{Name: "click_count", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(11)"}},
		{Name: "like_count", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(11)"}},
		{Name: "create_id", Type: field.TypeInt64, Nullable: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "create_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "modify_id", Type: field.TypeInt64, Nullable: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "modify_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// CArticleTable holds the schema information for the "c_article" table.
	CArticleTable = &schema.Table{
		Name:       "c_article",
		Columns:    CArticleColumns,
		PrimaryKey: []*schema.Column{CArticleColumns[0]},
	}
	// CCategoryColumns holds the columns for the "c_category" table.
	CCategoryColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt32, Increment: true, SchemaType: map[string]string{"mysql": "int(20)"}},
		{Name: "category_id", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(11)"}},
		{Name: "category_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(32)"}},
	}
	// CCategoryTable holds the schema information for the "c_category" table.
	CCategoryTable = &schema.Table{
		Name:       "c_category",
		Columns:    CCategoryColumns,
		PrimaryKey: []*schema.Column{CCategoryColumns[0]},
	}
	// CWebsiteColumns holds the columns for the "c_website" table.
	CWebsiteColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "sort_id", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(8)"}},
		{Name: "category", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(2)"}},
		{Name: "type", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(2)"}},
		{Name: "website_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "website_icon", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "website_url", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "summary", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(512)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(1024)"}},
		{Name: "create_id", Type: field.TypeInt64, Nullable: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "create_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "modify_id", Type: field.TypeInt64, Nullable: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "modify_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// CWebsiteTable holds the schema information for the "c_website" table.
	CWebsiteTable = &schema.Table{
		Name:       "c_website",
		Columns:    CWebsiteColumns,
		PrimaryKey: []*schema.Column{CWebsiteColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		SAccountTable,
		CArticleTable,
		CCategoryTable,
		CWebsiteTable,
	}
)

func init() {
	SAccountTable.Annotation = &entsql.Annotation{
		Table: "s_account",
	}
	CArticleTable.Annotation = &entsql.Annotation{
		Table: "c_article",
	}
	CCategoryTable.Annotation = &entsql.Annotation{
		Table: "c_category",
	}
	CWebsiteTable.Annotation = &entsql.Annotation{
		Table: "c_website",
	}
}

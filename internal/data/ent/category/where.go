// Code generated by ent, DO NOT EDIT.

package category

import (
	"go-server/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldID, id))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v int64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldParentID, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int32) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryName applies equality check predicate on the "category_name" field. It's identical to CategoryNameEQ.
func CategoryName(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryName, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldStatus, v))
}

// CreateID applies equality check predicate on the "create_id" field. It's identical to CreateIDEQ.
func CreateID(v int64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCreateID, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCreateTime, v))
}

// ModifyID applies equality check predicate on the "modify_id" field. It's identical to ModifyIDEQ.
func ModifyID(v int64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldModifyID, v))
}

// ModifyTime applies equality check predicate on the "modify_time" field. It's identical to ModifyTimeEQ.
func ModifyTime(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldModifyTime, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v int64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v int64) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...int64) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...int64) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDGT applies the GT predicate on the "parent_id" field.
func ParentIDGT(v int64) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldParentID, v))
}

// ParentIDGTE applies the GTE predicate on the "parent_id" field.
func ParentIDGTE(v int64) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldParentID, v))
}

// ParentIDLT applies the LT predicate on the "parent_id" field.
func ParentIDLT(v int64) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldParentID, v))
}

// ParentIDLTE applies the LTE predicate on the "parent_id" field.
func ParentIDLTE(v int64) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldParentID, v))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldParentID))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int32) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int32) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int32) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int32) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int32) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int32) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int32) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int32) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldCategoryID))
}

// CategoryNameEQ applies the EQ predicate on the "category_name" field.
func CategoryNameEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCategoryName, v))
}

// CategoryNameNEQ applies the NEQ predicate on the "category_name" field.
func CategoryNameNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCategoryName, v))
}

// CategoryNameIn applies the In predicate on the "category_name" field.
func CategoryNameIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCategoryName, vs...))
}

// CategoryNameNotIn applies the NotIn predicate on the "category_name" field.
func CategoryNameNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCategoryName, vs...))
}

// CategoryNameGT applies the GT predicate on the "category_name" field.
func CategoryNameGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCategoryName, v))
}

// CategoryNameGTE applies the GTE predicate on the "category_name" field.
func CategoryNameGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCategoryName, v))
}

// CategoryNameLT applies the LT predicate on the "category_name" field.
func CategoryNameLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCategoryName, v))
}

// CategoryNameLTE applies the LTE predicate on the "category_name" field.
func CategoryNameLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCategoryName, v))
}

// CategoryNameContains applies the Contains predicate on the "category_name" field.
func CategoryNameContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldCategoryName, v))
}

// CategoryNameHasPrefix applies the HasPrefix predicate on the "category_name" field.
func CategoryNameHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldCategoryName, v))
}

// CategoryNameHasSuffix applies the HasSuffix predicate on the "category_name" field.
func CategoryNameHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldCategoryName, v))
}

// CategoryNameIsNil applies the IsNil predicate on the "category_name" field.
func CategoryNameIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldCategoryName))
}

// CategoryNameNotNil applies the NotNil predicate on the "category_name" field.
func CategoryNameNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldCategoryName))
}

// CategoryNameEqualFold applies the EqualFold predicate on the "category_name" field.
func CategoryNameEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldCategoryName, v))
}

// CategoryNameContainsFold applies the ContainsFold predicate on the "category_name" field.
func CategoryNameContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldCategoryName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldStatus))
}

// CreateIDEQ applies the EQ predicate on the "create_id" field.
func CreateIDEQ(v int64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCreateID, v))
}

// CreateIDNEQ applies the NEQ predicate on the "create_id" field.
func CreateIDNEQ(v int64) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCreateID, v))
}

// CreateIDIn applies the In predicate on the "create_id" field.
func CreateIDIn(vs ...int64) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCreateID, vs...))
}

// CreateIDNotIn applies the NotIn predicate on the "create_id" field.
func CreateIDNotIn(vs ...int64) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCreateID, vs...))
}

// CreateIDGT applies the GT predicate on the "create_id" field.
func CreateIDGT(v int64) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCreateID, v))
}

// CreateIDGTE applies the GTE predicate on the "create_id" field.
func CreateIDGTE(v int64) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCreateID, v))
}

// CreateIDLT applies the LT predicate on the "create_id" field.
func CreateIDLT(v int64) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCreateID, v))
}

// CreateIDLTE applies the LTE predicate on the "create_id" field.
func CreateIDLTE(v int64) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCreateID, v))
}

// CreateIDIsNil applies the IsNil predicate on the "create_id" field.
func CreateIDIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldCreateID))
}

// CreateIDNotNil applies the NotNil predicate on the "create_id" field.
func CreateIDNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldCreateID))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldCreateTime))
}

// ModifyIDEQ applies the EQ predicate on the "modify_id" field.
func ModifyIDEQ(v int64) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldModifyID, v))
}

// ModifyIDNEQ applies the NEQ predicate on the "modify_id" field.
func ModifyIDNEQ(v int64) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldModifyID, v))
}

// ModifyIDIn applies the In predicate on the "modify_id" field.
func ModifyIDIn(vs ...int64) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldModifyID, vs...))
}

// ModifyIDNotIn applies the NotIn predicate on the "modify_id" field.
func ModifyIDNotIn(vs ...int64) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldModifyID, vs...))
}

// ModifyIDGT applies the GT predicate on the "modify_id" field.
func ModifyIDGT(v int64) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldModifyID, v))
}

// ModifyIDGTE applies the GTE predicate on the "modify_id" field.
func ModifyIDGTE(v int64) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldModifyID, v))
}

// ModifyIDLT applies the LT predicate on the "modify_id" field.
func ModifyIDLT(v int64) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldModifyID, v))
}

// ModifyIDLTE applies the LTE predicate on the "modify_id" field.
func ModifyIDLTE(v int64) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldModifyID, v))
}

// ModifyIDIsNil applies the IsNil predicate on the "modify_id" field.
func ModifyIDIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldModifyID))
}

// ModifyIDNotNil applies the NotNil predicate on the "modify_id" field.
func ModifyIDNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldModifyID))
}

// ModifyTimeEQ applies the EQ predicate on the "modify_time" field.
func ModifyTimeEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldModifyTime, v))
}

// ModifyTimeNEQ applies the NEQ predicate on the "modify_time" field.
func ModifyTimeNEQ(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldModifyTime, v))
}

// ModifyTimeIn applies the In predicate on the "modify_time" field.
func ModifyTimeIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldModifyTime, vs...))
}

// ModifyTimeNotIn applies the NotIn predicate on the "modify_time" field.
func ModifyTimeNotIn(vs ...time.Time) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldModifyTime, vs...))
}

// ModifyTimeGT applies the GT predicate on the "modify_time" field.
func ModifyTimeGT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldModifyTime, v))
}

// ModifyTimeGTE applies the GTE predicate on the "modify_time" field.
func ModifyTimeGTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldModifyTime, v))
}

// ModifyTimeLT applies the LT predicate on the "modify_time" field.
func ModifyTimeLT(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldModifyTime, v))
}

// ModifyTimeLTE applies the LTE predicate on the "modify_time" field.
func ModifyTimeLTE(v time.Time) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldModifyTime, v))
}

// ModifyTimeIsNil applies the IsNil predicate on the "modify_time" field.
func ModifyTimeIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldModifyTime))
}

// ModifyTimeNotNil applies the NotNil predicate on the "modify_time" field.
func ModifyTimeNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldModifyTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		p(s.Not())
	})
}

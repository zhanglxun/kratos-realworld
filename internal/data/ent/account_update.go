// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-server/internal/data/ent/account"
	"go-server/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetAccount sets the "account" field.
func (au *AccountUpdate) SetAccount(s string) *AccountUpdate {
	au.mutation.SetAccount(s)
	return au
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (au *AccountUpdate) SetNillableAccount(s *string) *AccountUpdate {
	if s != nil {
		au.SetAccount(*s)
	}
	return au
}

// ClearAccount clears the value of the "account" field.
func (au *AccountUpdate) ClearAccount() *AccountUpdate {
	au.mutation.ClearAccount()
	return au
}

// SetPwd sets the "pwd" field.
func (au *AccountUpdate) SetPwd(s string) *AccountUpdate {
	au.mutation.SetPwd(s)
	return au
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (au *AccountUpdate) SetNillablePwd(s *string) *AccountUpdate {
	if s != nil {
		au.SetPwd(*s)
	}
	return au
}

// ClearPwd clears the value of the "pwd" field.
func (au *AccountUpdate) ClearPwd() *AccountUpdate {
	au.mutation.ClearPwd()
	return au
}

// SetNickname sets the "nickname" field.
func (au *AccountUpdate) SetNickname(s string) *AccountUpdate {
	au.mutation.SetNickname(s)
	return au
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (au *AccountUpdate) SetNillableNickname(s *string) *AccountUpdate {
	if s != nil {
		au.SetNickname(*s)
	}
	return au
}

// ClearNickname clears the value of the "nickname" field.
func (au *AccountUpdate) ClearNickname() *AccountUpdate {
	au.mutation.ClearNickname()
	return au
}

// SetEmail sets the "email" field.
func (au *AccountUpdate) SetEmail(s string) *AccountUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (au *AccountUpdate) SetNillableEmail(s *string) *AccountUpdate {
	if s != nil {
		au.SetEmail(*s)
	}
	return au
}

// ClearEmail clears the value of the "email" field.
func (au *AccountUpdate) ClearEmail() *AccountUpdate {
	au.mutation.ClearEmail()
	return au
}

// SetMobile sets the "mobile" field.
func (au *AccountUpdate) SetMobile(s string) *AccountUpdate {
	au.mutation.SetMobile(s)
	return au
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (au *AccountUpdate) SetNillableMobile(s *string) *AccountUpdate {
	if s != nil {
		au.SetMobile(*s)
	}
	return au
}

// ClearMobile clears the value of the "mobile" field.
func (au *AccountUpdate) ClearMobile() *AccountUpdate {
	au.mutation.ClearMobile()
	return au
}

// SetCreateID sets the "create_id" field.
func (au *AccountUpdate) SetCreateID(i int64) *AccountUpdate {
	au.mutation.ResetCreateID()
	au.mutation.SetCreateID(i)
	return au
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (au *AccountUpdate) SetNillableCreateID(i *int64) *AccountUpdate {
	if i != nil {
		au.SetCreateID(*i)
	}
	return au
}

// AddCreateID adds i to the "create_id" field.
func (au *AccountUpdate) AddCreateID(i int64) *AccountUpdate {
	au.mutation.AddCreateID(i)
	return au
}

// ClearCreateID clears the value of the "create_id" field.
func (au *AccountUpdate) ClearCreateID() *AccountUpdate {
	au.mutation.ClearCreateID()
	return au
}

// SetCreateTime sets the "create_time" field.
func (au *AccountUpdate) SetCreateTime(t time.Time) *AccountUpdate {
	au.mutation.SetCreateTime(t)
	return au
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (au *AccountUpdate) SetNillableCreateTime(t *time.Time) *AccountUpdate {
	if t != nil {
		au.SetCreateTime(*t)
	}
	return au
}

// ClearCreateTime clears the value of the "create_time" field.
func (au *AccountUpdate) ClearCreateTime() *AccountUpdate {
	au.mutation.ClearCreateTime()
	return au
}

// SetModifyID sets the "modify_id" field.
func (au *AccountUpdate) SetModifyID(i int64) *AccountUpdate {
	au.mutation.ResetModifyID()
	au.mutation.SetModifyID(i)
	return au
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (au *AccountUpdate) SetNillableModifyID(i *int64) *AccountUpdate {
	if i != nil {
		au.SetModifyID(*i)
	}
	return au
}

// AddModifyID adds i to the "modify_id" field.
func (au *AccountUpdate) AddModifyID(i int64) *AccountUpdate {
	au.mutation.AddModifyID(i)
	return au
}

// ClearModifyID clears the value of the "modify_id" field.
func (au *AccountUpdate) ClearModifyID() *AccountUpdate {
	au.mutation.ClearModifyID()
	return au
}

// SetModifyTime sets the "modify_time" field.
func (au *AccountUpdate) SetModifyTime(t time.Time) *AccountUpdate {
	au.mutation.SetModifyTime(t)
	return au
}

// ClearModifyTime clears the value of the "modify_time" field.
func (au *AccountUpdate) ClearModifyTime() *AccountUpdate {
	au.mutation.ClearModifyTime()
	return au
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks[int, AccountMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AccountUpdate) defaults() {
	if _, ok := au.mutation.ModifyTime(); !ok && !au.mutation.ModifyTimeCleared() {
		v := account.UpdateDefaultModifyTime()
		au.mutation.SetModifyTime(v)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Account(); ok {
		_spec.SetField(account.FieldAccount, field.TypeString, value)
	}
	if au.mutation.AccountCleared() {
		_spec.ClearField(account.FieldAccount, field.TypeString)
	}
	if value, ok := au.mutation.Pwd(); ok {
		_spec.SetField(account.FieldPwd, field.TypeString, value)
	}
	if au.mutation.PwdCleared() {
		_spec.ClearField(account.FieldPwd, field.TypeString)
	}
	if value, ok := au.mutation.Nickname(); ok {
		_spec.SetField(account.FieldNickname, field.TypeString, value)
	}
	if au.mutation.NicknameCleared() {
		_spec.ClearField(account.FieldNickname, field.TypeString)
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if au.mutation.EmailCleared() {
		_spec.ClearField(account.FieldEmail, field.TypeString)
	}
	if value, ok := au.mutation.Mobile(); ok {
		_spec.SetField(account.FieldMobile, field.TypeString, value)
	}
	if au.mutation.MobileCleared() {
		_spec.ClearField(account.FieldMobile, field.TypeString)
	}
	if value, ok := au.mutation.CreateID(); ok {
		_spec.SetField(account.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedCreateID(); ok {
		_spec.AddField(account.FieldCreateID, field.TypeInt64, value)
	}
	if au.mutation.CreateIDCleared() {
		_spec.ClearField(account.FieldCreateID, field.TypeInt64)
	}
	if value, ok := au.mutation.CreateTime(); ok {
		_spec.SetField(account.FieldCreateTime, field.TypeTime, value)
	}
	if au.mutation.CreateTimeCleared() {
		_spec.ClearField(account.FieldCreateTime, field.TypeTime)
	}
	if value, ok := au.mutation.ModifyID(); ok {
		_spec.SetField(account.FieldModifyID, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedModifyID(); ok {
		_spec.AddField(account.FieldModifyID, field.TypeInt64, value)
	}
	if au.mutation.ModifyIDCleared() {
		_spec.ClearField(account.FieldModifyID, field.TypeInt64)
	}
	if value, ok := au.mutation.ModifyTime(); ok {
		_spec.SetField(account.FieldModifyTime, field.TypeTime, value)
	}
	if au.mutation.ModifyTimeCleared() {
		_spec.ClearField(account.FieldModifyTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetAccount sets the "account" field.
func (auo *AccountUpdateOne) SetAccount(s string) *AccountUpdateOne {
	auo.mutation.SetAccount(s)
	return auo
}

// SetNillableAccount sets the "account" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableAccount(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetAccount(*s)
	}
	return auo
}

// ClearAccount clears the value of the "account" field.
func (auo *AccountUpdateOne) ClearAccount() *AccountUpdateOne {
	auo.mutation.ClearAccount()
	return auo
}

// SetPwd sets the "pwd" field.
func (auo *AccountUpdateOne) SetPwd(s string) *AccountUpdateOne {
	auo.mutation.SetPwd(s)
	return auo
}

// SetNillablePwd sets the "pwd" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillablePwd(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetPwd(*s)
	}
	return auo
}

// ClearPwd clears the value of the "pwd" field.
func (auo *AccountUpdateOne) ClearPwd() *AccountUpdateOne {
	auo.mutation.ClearPwd()
	return auo
}

// SetNickname sets the "nickname" field.
func (auo *AccountUpdateOne) SetNickname(s string) *AccountUpdateOne {
	auo.mutation.SetNickname(s)
	return auo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableNickname(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetNickname(*s)
	}
	return auo
}

// ClearNickname clears the value of the "nickname" field.
func (auo *AccountUpdateOne) ClearNickname() *AccountUpdateOne {
	auo.mutation.ClearNickname()
	return auo
}

// SetEmail sets the "email" field.
func (auo *AccountUpdateOne) SetEmail(s string) *AccountUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableEmail(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetEmail(*s)
	}
	return auo
}

// ClearEmail clears the value of the "email" field.
func (auo *AccountUpdateOne) ClearEmail() *AccountUpdateOne {
	auo.mutation.ClearEmail()
	return auo
}

// SetMobile sets the "mobile" field.
func (auo *AccountUpdateOne) SetMobile(s string) *AccountUpdateOne {
	auo.mutation.SetMobile(s)
	return auo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableMobile(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetMobile(*s)
	}
	return auo
}

// ClearMobile clears the value of the "mobile" field.
func (auo *AccountUpdateOne) ClearMobile() *AccountUpdateOne {
	auo.mutation.ClearMobile()
	return auo
}

// SetCreateID sets the "create_id" field.
func (auo *AccountUpdateOne) SetCreateID(i int64) *AccountUpdateOne {
	auo.mutation.ResetCreateID()
	auo.mutation.SetCreateID(i)
	return auo
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableCreateID(i *int64) *AccountUpdateOne {
	if i != nil {
		auo.SetCreateID(*i)
	}
	return auo
}

// AddCreateID adds i to the "create_id" field.
func (auo *AccountUpdateOne) AddCreateID(i int64) *AccountUpdateOne {
	auo.mutation.AddCreateID(i)
	return auo
}

// ClearCreateID clears the value of the "create_id" field.
func (auo *AccountUpdateOne) ClearCreateID() *AccountUpdateOne {
	auo.mutation.ClearCreateID()
	return auo
}

// SetCreateTime sets the "create_time" field.
func (auo *AccountUpdateOne) SetCreateTime(t time.Time) *AccountUpdateOne {
	auo.mutation.SetCreateTime(t)
	return auo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableCreateTime(t *time.Time) *AccountUpdateOne {
	if t != nil {
		auo.SetCreateTime(*t)
	}
	return auo
}

// ClearCreateTime clears the value of the "create_time" field.
func (auo *AccountUpdateOne) ClearCreateTime() *AccountUpdateOne {
	auo.mutation.ClearCreateTime()
	return auo
}

// SetModifyID sets the "modify_id" field.
func (auo *AccountUpdateOne) SetModifyID(i int64) *AccountUpdateOne {
	auo.mutation.ResetModifyID()
	auo.mutation.SetModifyID(i)
	return auo
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableModifyID(i *int64) *AccountUpdateOne {
	if i != nil {
		auo.SetModifyID(*i)
	}
	return auo
}

// AddModifyID adds i to the "modify_id" field.
func (auo *AccountUpdateOne) AddModifyID(i int64) *AccountUpdateOne {
	auo.mutation.AddModifyID(i)
	return auo
}

// ClearModifyID clears the value of the "modify_id" field.
func (auo *AccountUpdateOne) ClearModifyID() *AccountUpdateOne {
	auo.mutation.ClearModifyID()
	return auo
}

// SetModifyTime sets the "modify_time" field.
func (auo *AccountUpdateOne) SetModifyTime(t time.Time) *AccountUpdateOne {
	auo.mutation.SetModifyTime(t)
	return auo
}

// ClearModifyTime clears the value of the "modify_time" field.
func (auo *AccountUpdateOne) ClearModifyTime() *AccountUpdateOne {
	auo.mutation.ClearModifyTime()
	return auo
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (auo *AccountUpdateOne) Where(ps ...predicate.Account) *AccountUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	auo.defaults()
	return withHooks[*Account, AccountMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AccountUpdateOne) defaults() {
	if _, ok := auo.mutation.ModifyTime(); !ok && !auo.mutation.ModifyTimeCleared() {
		v := account.UpdateDefaultModifyTime()
		auo.mutation.SetModifyTime(v)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Account(); ok {
		_spec.SetField(account.FieldAccount, field.TypeString, value)
	}
	if auo.mutation.AccountCleared() {
		_spec.ClearField(account.FieldAccount, field.TypeString)
	}
	if value, ok := auo.mutation.Pwd(); ok {
		_spec.SetField(account.FieldPwd, field.TypeString, value)
	}
	if auo.mutation.PwdCleared() {
		_spec.ClearField(account.FieldPwd, field.TypeString)
	}
	if value, ok := auo.mutation.Nickname(); ok {
		_spec.SetField(account.FieldNickname, field.TypeString, value)
	}
	if auo.mutation.NicknameCleared() {
		_spec.ClearField(account.FieldNickname, field.TypeString)
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if auo.mutation.EmailCleared() {
		_spec.ClearField(account.FieldEmail, field.TypeString)
	}
	if value, ok := auo.mutation.Mobile(); ok {
		_spec.SetField(account.FieldMobile, field.TypeString, value)
	}
	if auo.mutation.MobileCleared() {
		_spec.ClearField(account.FieldMobile, field.TypeString)
	}
	if value, ok := auo.mutation.CreateID(); ok {
		_spec.SetField(account.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedCreateID(); ok {
		_spec.AddField(account.FieldCreateID, field.TypeInt64, value)
	}
	if auo.mutation.CreateIDCleared() {
		_spec.ClearField(account.FieldCreateID, field.TypeInt64)
	}
	if value, ok := auo.mutation.CreateTime(); ok {
		_spec.SetField(account.FieldCreateTime, field.TypeTime, value)
	}
	if auo.mutation.CreateTimeCleared() {
		_spec.ClearField(account.FieldCreateTime, field.TypeTime)
	}
	if value, ok := auo.mutation.ModifyID(); ok {
		_spec.SetField(account.FieldModifyID, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedModifyID(); ok {
		_spec.AddField(account.FieldModifyID, field.TypeInt64, value)
	}
	if auo.mutation.ModifyIDCleared() {
		_spec.ClearField(account.FieldModifyID, field.TypeInt64)
	}
	if value, ok := auo.mutation.ModifyTime(); ok {
		_spec.SetField(account.FieldModifyTime, field.TypeTime, value)
	}
	if auo.mutation.ModifyTimeCleared() {
		_spec.ClearField(account.FieldModifyTime, field.TypeTime)
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

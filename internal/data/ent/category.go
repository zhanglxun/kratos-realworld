// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-server/internal/data/ent/category"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Category is the model entity for the Category schema.
type Category struct {
	config `json:"-"`
	// ID of the ent.
	// 主键id
	ID int64 `json:"id,omitempty"`
	// 类父级分类
	ParentID int64 `json:"parent_id,omitempty"`
	// 类别id
	CategoryID int32 `json:"category_id,omitempty"`
	// 名称
	CategoryName string `json:"category_name,omitempty"`
	// 状态
	Status int32 `json:"status,omitempty"`
	// 创建人id
	CreateID int64 `json:"create_id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 修改人id
	ModifyID int64 `json:"modify_id,omitempty"`
	// 修改时间
	ModifyTime time.Time `json:"modify_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Category) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case category.FieldID, category.FieldParentID, category.FieldCategoryID, category.FieldStatus, category.FieldCreateID, category.FieldModifyID:
			values[i] = new(sql.NullInt64)
		case category.FieldCategoryName:
			values[i] = new(sql.NullString)
		case category.FieldCreateTime, category.FieldModifyTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Category", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Category fields.
func (c *Category) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case category.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int64(value.Int64)
		case category.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				c.ParentID = value.Int64
			}
		case category.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				c.CategoryID = int32(value.Int64)
			}
		case category.FieldCategoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_name", values[i])
			} else if value.Valid {
				c.CategoryName = value.String
			}
		case category.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = int32(value.Int64)
			}
		case category.FieldCreateID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_id", values[i])
			} else if value.Valid {
				c.CreateID = value.Int64
			}
		case category.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case category.FieldModifyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field modify_id", values[i])
			} else if value.Valid {
				c.ModifyID = value.Int64
			}
		case category.FieldModifyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modify_time", values[i])
			} else if value.Valid {
				c.ModifyTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Category.
// Note that you need to call Category.Unwrap() before calling this method if this Category
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Category) Update() *CategoryUpdateOne {
	return NewCategoryClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Category entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Category) Unwrap() *Category {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Category is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Category) String() string {
	var builder strings.Builder
	builder.WriteString("Category(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ParentID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("category_name=")
	builder.WriteString(c.CategoryName)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("create_id=")
	builder.WriteString(fmt.Sprintf("%v", c.CreateID))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modify_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ModifyID))
	builder.WriteString(", ")
	builder.WriteString("modify_time=")
	builder.WriteString(c.ModifyTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Categories is a parsable slice of Category.
type Categories []*Category

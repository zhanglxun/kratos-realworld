// Code generated by ent, DO NOT EDIT.

package article

import (
	"go-server/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldID, id))
}

// SortID applies equality check predicate on the "sort_id" field. It's identical to SortIDEQ.
func SortID(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldSortID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldName, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCategoryID, v))
}

// Recommend applies equality check predicate on the "recommend" field. It's identical to RecommendEQ.
func Recommend(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldRecommend, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldDescription, v))
}

// ContentBody applies equality check predicate on the "content_body" field. It's identical to ContentBodyEQ.
func ContentBody(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContentBody, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldImageURL, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldStatus, v))
}

// ClickCount applies equality check predicate on the "click_count" field. It's identical to ClickCountEQ.
func ClickCount(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldClickCount, v))
}

// LikeCount applies equality check predicate on the "like_count" field. It's identical to LikeCountEQ.
func LikeCount(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldLikeCount, v))
}

// CreateID applies equality check predicate on the "create_id" field. It's identical to CreateIDEQ.
func CreateID(v int64) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreateID, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreateTime, v))
}

// ModifyID applies equality check predicate on the "modify_id" field. It's identical to ModifyIDEQ.
func ModifyID(v int64) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldModifyID, v))
}

// ModifyTime applies equality check predicate on the "modify_time" field. It's identical to ModifyTimeEQ.
func ModifyTime(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldModifyTime, v))
}

// SortIDEQ applies the EQ predicate on the "sort_id" field.
func SortIDEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldSortID, v))
}

// SortIDNEQ applies the NEQ predicate on the "sort_id" field.
func SortIDNEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldSortID, v))
}

// SortIDIn applies the In predicate on the "sort_id" field.
func SortIDIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldSortID, vs...))
}

// SortIDNotIn applies the NotIn predicate on the "sort_id" field.
func SortIDNotIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldSortID, vs...))
}

// SortIDGT applies the GT predicate on the "sort_id" field.
func SortIDGT(v int32) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldSortID, v))
}

// SortIDGTE applies the GTE predicate on the "sort_id" field.
func SortIDGTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldSortID, v))
}

// SortIDLT applies the LT predicate on the "sort_id" field.
func SortIDLT(v int32) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldSortID, v))
}

// SortIDLTE applies the LTE predicate on the "sort_id" field.
func SortIDLTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldSortID, v))
}

// SortIDIsNil applies the IsNil predicate on the "sort_id" field.
func SortIDIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldSortID))
}

// SortIDNotNil applies the NotNil predicate on the "sort_id" field.
func SortIDNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldSortID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldName, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int32) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int32) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldCategoryID))
}

// RecommendEQ applies the EQ predicate on the "recommend" field.
func RecommendEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldRecommend, v))
}

// RecommendNEQ applies the NEQ predicate on the "recommend" field.
func RecommendNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldRecommend, v))
}

// RecommendIn applies the In predicate on the "recommend" field.
func RecommendIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldRecommend, vs...))
}

// RecommendNotIn applies the NotIn predicate on the "recommend" field.
func RecommendNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldRecommend, vs...))
}

// RecommendGT applies the GT predicate on the "recommend" field.
func RecommendGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldRecommend, v))
}

// RecommendGTE applies the GTE predicate on the "recommend" field.
func RecommendGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldRecommend, v))
}

// RecommendLT applies the LT predicate on the "recommend" field.
func RecommendLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldRecommend, v))
}

// RecommendLTE applies the LTE predicate on the "recommend" field.
func RecommendLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldRecommend, v))
}

// RecommendContains applies the Contains predicate on the "recommend" field.
func RecommendContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldRecommend, v))
}

// RecommendHasPrefix applies the HasPrefix predicate on the "recommend" field.
func RecommendHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldRecommend, v))
}

// RecommendHasSuffix applies the HasSuffix predicate on the "recommend" field.
func RecommendHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldRecommend, v))
}

// RecommendIsNil applies the IsNil predicate on the "recommend" field.
func RecommendIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldRecommend))
}

// RecommendNotNil applies the NotNil predicate on the "recommend" field.
func RecommendNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldRecommend))
}

// RecommendEqualFold applies the EqualFold predicate on the "recommend" field.
func RecommendEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldRecommend, v))
}

// RecommendContainsFold applies the ContainsFold predicate on the "recommend" field.
func RecommendContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldRecommend, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldDescription, v))
}

// ContentBodyEQ applies the EQ predicate on the "content_body" field.
func ContentBodyEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldContentBody, v))
}

// ContentBodyNEQ applies the NEQ predicate on the "content_body" field.
func ContentBodyNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldContentBody, v))
}

// ContentBodyIn applies the In predicate on the "content_body" field.
func ContentBodyIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldContentBody, vs...))
}

// ContentBodyNotIn applies the NotIn predicate on the "content_body" field.
func ContentBodyNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldContentBody, vs...))
}

// ContentBodyGT applies the GT predicate on the "content_body" field.
func ContentBodyGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldContentBody, v))
}

// ContentBodyGTE applies the GTE predicate on the "content_body" field.
func ContentBodyGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldContentBody, v))
}

// ContentBodyLT applies the LT predicate on the "content_body" field.
func ContentBodyLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldContentBody, v))
}

// ContentBodyLTE applies the LTE predicate on the "content_body" field.
func ContentBodyLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldContentBody, v))
}

// ContentBodyContains applies the Contains predicate on the "content_body" field.
func ContentBodyContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldContentBody, v))
}

// ContentBodyHasPrefix applies the HasPrefix predicate on the "content_body" field.
func ContentBodyHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldContentBody, v))
}

// ContentBodyHasSuffix applies the HasSuffix predicate on the "content_body" field.
func ContentBodyHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldContentBody, v))
}

// ContentBodyIsNil applies the IsNil predicate on the "content_body" field.
func ContentBodyIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldContentBody))
}

// ContentBodyNotNil applies the NotNil predicate on the "content_body" field.
func ContentBodyNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldContentBody))
}

// ContentBodyEqualFold applies the EqualFold predicate on the "content_body" field.
func ContentBodyEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldContentBody, v))
}

// ContentBodyContainsFold applies the ContainsFold predicate on the "content_body" field.
func ContentBodyContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldContentBody, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.Article {
	return predicate.Article(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.Article {
	return predicate.Article(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.Article {
	return predicate.Article(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.Article {
	return predicate.Article(sql.FieldContainsFold(FieldImageURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldStatus))
}

// ClickCountEQ applies the EQ predicate on the "click_count" field.
func ClickCountEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldClickCount, v))
}

// ClickCountNEQ applies the NEQ predicate on the "click_count" field.
func ClickCountNEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldClickCount, v))
}

// ClickCountIn applies the In predicate on the "click_count" field.
func ClickCountIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldClickCount, vs...))
}

// ClickCountNotIn applies the NotIn predicate on the "click_count" field.
func ClickCountNotIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldClickCount, vs...))
}

// ClickCountGT applies the GT predicate on the "click_count" field.
func ClickCountGT(v int32) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldClickCount, v))
}

// ClickCountGTE applies the GTE predicate on the "click_count" field.
func ClickCountGTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldClickCount, v))
}

// ClickCountLT applies the LT predicate on the "click_count" field.
func ClickCountLT(v int32) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldClickCount, v))
}

// ClickCountLTE applies the LTE predicate on the "click_count" field.
func ClickCountLTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldClickCount, v))
}

// ClickCountIsNil applies the IsNil predicate on the "click_count" field.
func ClickCountIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldClickCount))
}

// ClickCountNotNil applies the NotNil predicate on the "click_count" field.
func ClickCountNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldClickCount))
}

// LikeCountEQ applies the EQ predicate on the "like_count" field.
func LikeCountEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldLikeCount, v))
}

// LikeCountNEQ applies the NEQ predicate on the "like_count" field.
func LikeCountNEQ(v int32) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldLikeCount, v))
}

// LikeCountIn applies the In predicate on the "like_count" field.
func LikeCountIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldLikeCount, vs...))
}

// LikeCountNotIn applies the NotIn predicate on the "like_count" field.
func LikeCountNotIn(vs ...int32) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldLikeCount, vs...))
}

// LikeCountGT applies the GT predicate on the "like_count" field.
func LikeCountGT(v int32) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldLikeCount, v))
}

// LikeCountGTE applies the GTE predicate on the "like_count" field.
func LikeCountGTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldLikeCount, v))
}

// LikeCountLT applies the LT predicate on the "like_count" field.
func LikeCountLT(v int32) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldLikeCount, v))
}

// LikeCountLTE applies the LTE predicate on the "like_count" field.
func LikeCountLTE(v int32) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldLikeCount, v))
}

// LikeCountIsNil applies the IsNil predicate on the "like_count" field.
func LikeCountIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldLikeCount))
}

// LikeCountNotNil applies the NotNil predicate on the "like_count" field.
func LikeCountNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldLikeCount))
}

// CreateIDEQ applies the EQ predicate on the "create_id" field.
func CreateIDEQ(v int64) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreateID, v))
}

// CreateIDNEQ applies the NEQ predicate on the "create_id" field.
func CreateIDNEQ(v int64) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCreateID, v))
}

// CreateIDIn applies the In predicate on the "create_id" field.
func CreateIDIn(vs ...int64) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldCreateID, vs...))
}

// CreateIDNotIn applies the NotIn predicate on the "create_id" field.
func CreateIDNotIn(vs ...int64) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldCreateID, vs...))
}

// CreateIDGT applies the GT predicate on the "create_id" field.
func CreateIDGT(v int64) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldCreateID, v))
}

// CreateIDGTE applies the GTE predicate on the "create_id" field.
func CreateIDGTE(v int64) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldCreateID, v))
}

// CreateIDLT applies the LT predicate on the "create_id" field.
func CreateIDLT(v int64) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldCreateID, v))
}

// CreateIDLTE applies the LTE predicate on the "create_id" field.
func CreateIDLTE(v int64) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldCreateID, v))
}

// CreateIDIsNil applies the IsNil predicate on the "create_id" field.
func CreateIDIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldCreateID))
}

// CreateIDNotNil applies the NotNil predicate on the "create_id" field.
func CreateIDNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldCreateID))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldCreateTime))
}

// ModifyIDEQ applies the EQ predicate on the "modify_id" field.
func ModifyIDEQ(v int64) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldModifyID, v))
}

// ModifyIDNEQ applies the NEQ predicate on the "modify_id" field.
func ModifyIDNEQ(v int64) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldModifyID, v))
}

// ModifyIDIn applies the In predicate on the "modify_id" field.
func ModifyIDIn(vs ...int64) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldModifyID, vs...))
}

// ModifyIDNotIn applies the NotIn predicate on the "modify_id" field.
func ModifyIDNotIn(vs ...int64) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldModifyID, vs...))
}

// ModifyIDGT applies the GT predicate on the "modify_id" field.
func ModifyIDGT(v int64) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldModifyID, v))
}

// ModifyIDGTE applies the GTE predicate on the "modify_id" field.
func ModifyIDGTE(v int64) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldModifyID, v))
}

// ModifyIDLT applies the LT predicate on the "modify_id" field.
func ModifyIDLT(v int64) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldModifyID, v))
}

// ModifyIDLTE applies the LTE predicate on the "modify_id" field.
func ModifyIDLTE(v int64) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldModifyID, v))
}

// ModifyIDIsNil applies the IsNil predicate on the "modify_id" field.
func ModifyIDIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldModifyID))
}

// ModifyIDNotNil applies the NotNil predicate on the "modify_id" field.
func ModifyIDNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldModifyID))
}

// ModifyTimeEQ applies the EQ predicate on the "modify_time" field.
func ModifyTimeEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldEQ(FieldModifyTime, v))
}

// ModifyTimeNEQ applies the NEQ predicate on the "modify_time" field.
func ModifyTimeNEQ(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldNEQ(FieldModifyTime, v))
}

// ModifyTimeIn applies the In predicate on the "modify_time" field.
func ModifyTimeIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldIn(FieldModifyTime, vs...))
}

// ModifyTimeNotIn applies the NotIn predicate on the "modify_time" field.
func ModifyTimeNotIn(vs ...time.Time) predicate.Article {
	return predicate.Article(sql.FieldNotIn(FieldModifyTime, vs...))
}

// ModifyTimeGT applies the GT predicate on the "modify_time" field.
func ModifyTimeGT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGT(FieldModifyTime, v))
}

// ModifyTimeGTE applies the GTE predicate on the "modify_time" field.
func ModifyTimeGTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldGTE(FieldModifyTime, v))
}

// ModifyTimeLT applies the LT predicate on the "modify_time" field.
func ModifyTimeLT(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLT(FieldModifyTime, v))
}

// ModifyTimeLTE applies the LTE predicate on the "modify_time" field.
func ModifyTimeLTE(v time.Time) predicate.Article {
	return predicate.Article(sql.FieldLTE(FieldModifyTime, v))
}

// ModifyTimeIsNil applies the IsNil predicate on the "modify_time" field.
func ModifyTimeIsNil() predicate.Article {
	return predicate.Article(sql.FieldIsNull(FieldModifyTime))
}

// ModifyTimeNotNil applies the NotNil predicate on the "modify_time" field.
func ModifyTimeNotNil() predicate.Article {
	return predicate.Article(sql.FieldNotNull(FieldModifyTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Article) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Article) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Article) predicate.Article {
	return predicate.Article(func(s *sql.Selector) {
		p(s.Not())
	})
}

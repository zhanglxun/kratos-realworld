// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-server/internal/data/ent/predicate"
	"go-server/internal/data/ent/website"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebsiteUpdate is the builder for updating Website entities.
type WebsiteUpdate struct {
	config
	hooks    []Hook
	mutation *WebsiteMutation
}

// Where appends a list predicates to the WebsiteUpdate builder.
func (wu *WebsiteUpdate) Where(ps ...predicate.Website) *WebsiteUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetSortID sets the "sort_id" field.
func (wu *WebsiteUpdate) SetSortID(i int32) *WebsiteUpdate {
	wu.mutation.ResetSortID()
	wu.mutation.SetSortID(i)
	return wu
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableSortID(i *int32) *WebsiteUpdate {
	if i != nil {
		wu.SetSortID(*i)
	}
	return wu
}

// AddSortID adds i to the "sort_id" field.
func (wu *WebsiteUpdate) AddSortID(i int32) *WebsiteUpdate {
	wu.mutation.AddSortID(i)
	return wu
}

// ClearSortID clears the value of the "sort_id" field.
func (wu *WebsiteUpdate) ClearSortID() *WebsiteUpdate {
	wu.mutation.ClearSortID()
	return wu
}

// SetCategory sets the "category" field.
func (wu *WebsiteUpdate) SetCategory(i int32) *WebsiteUpdate {
	wu.mutation.ResetCategory()
	wu.mutation.SetCategory(i)
	return wu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableCategory(i *int32) *WebsiteUpdate {
	if i != nil {
		wu.SetCategory(*i)
	}
	return wu
}

// AddCategory adds i to the "category" field.
func (wu *WebsiteUpdate) AddCategory(i int32) *WebsiteUpdate {
	wu.mutation.AddCategory(i)
	return wu
}

// ClearCategory clears the value of the "category" field.
func (wu *WebsiteUpdate) ClearCategory() *WebsiteUpdate {
	wu.mutation.ClearCategory()
	return wu
}

// SetType sets the "type" field.
func (wu *WebsiteUpdate) SetType(i int32) *WebsiteUpdate {
	wu.mutation.ResetType()
	wu.mutation.SetType(i)
	return wu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableType(i *int32) *WebsiteUpdate {
	if i != nil {
		wu.SetType(*i)
	}
	return wu
}

// AddType adds i to the "type" field.
func (wu *WebsiteUpdate) AddType(i int32) *WebsiteUpdate {
	wu.mutation.AddType(i)
	return wu
}

// ClearType clears the value of the "type" field.
func (wu *WebsiteUpdate) ClearType() *WebsiteUpdate {
	wu.mutation.ClearType()
	return wu
}

// SetWebsiteName sets the "website_name" field.
func (wu *WebsiteUpdate) SetWebsiteName(s string) *WebsiteUpdate {
	wu.mutation.SetWebsiteName(s)
	return wu
}

// SetNillableWebsiteName sets the "website_name" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableWebsiteName(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetWebsiteName(*s)
	}
	return wu
}

// ClearWebsiteName clears the value of the "website_name" field.
func (wu *WebsiteUpdate) ClearWebsiteName() *WebsiteUpdate {
	wu.mutation.ClearWebsiteName()
	return wu
}

// SetWebsiteIcon sets the "website_icon" field.
func (wu *WebsiteUpdate) SetWebsiteIcon(s string) *WebsiteUpdate {
	wu.mutation.SetWebsiteIcon(s)
	return wu
}

// SetNillableWebsiteIcon sets the "website_icon" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableWebsiteIcon(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetWebsiteIcon(*s)
	}
	return wu
}

// ClearWebsiteIcon clears the value of the "website_icon" field.
func (wu *WebsiteUpdate) ClearWebsiteIcon() *WebsiteUpdate {
	wu.mutation.ClearWebsiteIcon()
	return wu
}

// SetWebsiteURL sets the "website_url" field.
func (wu *WebsiteUpdate) SetWebsiteURL(s string) *WebsiteUpdate {
	wu.mutation.SetWebsiteURL(s)
	return wu
}

// SetNillableWebsiteURL sets the "website_url" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableWebsiteURL(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetWebsiteURL(*s)
	}
	return wu
}

// ClearWebsiteURL clears the value of the "website_url" field.
func (wu *WebsiteUpdate) ClearWebsiteURL() *WebsiteUpdate {
	wu.mutation.ClearWebsiteURL()
	return wu
}

// SetSummary sets the "summary" field.
func (wu *WebsiteUpdate) SetSummary(s string) *WebsiteUpdate {
	wu.mutation.SetSummary(s)
	return wu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableSummary(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetSummary(*s)
	}
	return wu
}

// ClearSummary clears the value of the "summary" field.
func (wu *WebsiteUpdate) ClearSummary() *WebsiteUpdate {
	wu.mutation.ClearSummary()
	return wu
}

// SetDescription sets the "description" field.
func (wu *WebsiteUpdate) SetDescription(s string) *WebsiteUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableDescription(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetDescription(*s)
	}
	return wu
}

// ClearDescription clears the value of the "description" field.
func (wu *WebsiteUpdate) ClearDescription() *WebsiteUpdate {
	wu.mutation.ClearDescription()
	return wu
}

// SetStatus sets the "status" field.
func (wu *WebsiteUpdate) SetStatus(s string) *WebsiteUpdate {
	wu.mutation.SetStatus(s)
	return wu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableStatus(s *string) *WebsiteUpdate {
	if s != nil {
		wu.SetStatus(*s)
	}
	return wu
}

// ClearStatus clears the value of the "status" field.
func (wu *WebsiteUpdate) ClearStatus() *WebsiteUpdate {
	wu.mutation.ClearStatus()
	return wu
}

// SetCreateID sets the "create_id" field.
func (wu *WebsiteUpdate) SetCreateID(i int64) *WebsiteUpdate {
	wu.mutation.ResetCreateID()
	wu.mutation.SetCreateID(i)
	return wu
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableCreateID(i *int64) *WebsiteUpdate {
	if i != nil {
		wu.SetCreateID(*i)
	}
	return wu
}

// AddCreateID adds i to the "create_id" field.
func (wu *WebsiteUpdate) AddCreateID(i int64) *WebsiteUpdate {
	wu.mutation.AddCreateID(i)
	return wu
}

// ClearCreateID clears the value of the "create_id" field.
func (wu *WebsiteUpdate) ClearCreateID() *WebsiteUpdate {
	wu.mutation.ClearCreateID()
	return wu
}

// SetCreateTime sets the "create_time" field.
func (wu *WebsiteUpdate) SetCreateTime(t time.Time) *WebsiteUpdate {
	wu.mutation.SetCreateTime(t)
	return wu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableCreateTime(t *time.Time) *WebsiteUpdate {
	if t != nil {
		wu.SetCreateTime(*t)
	}
	return wu
}

// ClearCreateTime clears the value of the "create_time" field.
func (wu *WebsiteUpdate) ClearCreateTime() *WebsiteUpdate {
	wu.mutation.ClearCreateTime()
	return wu
}

// SetModifyID sets the "modify_id" field.
func (wu *WebsiteUpdate) SetModifyID(i int64) *WebsiteUpdate {
	wu.mutation.ResetModifyID()
	wu.mutation.SetModifyID(i)
	return wu
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (wu *WebsiteUpdate) SetNillableModifyID(i *int64) *WebsiteUpdate {
	if i != nil {
		wu.SetModifyID(*i)
	}
	return wu
}

// AddModifyID adds i to the "modify_id" field.
func (wu *WebsiteUpdate) AddModifyID(i int64) *WebsiteUpdate {
	wu.mutation.AddModifyID(i)
	return wu
}

// ClearModifyID clears the value of the "modify_id" field.
func (wu *WebsiteUpdate) ClearModifyID() *WebsiteUpdate {
	wu.mutation.ClearModifyID()
	return wu
}

// SetModifyTime sets the "modify_time" field.
func (wu *WebsiteUpdate) SetModifyTime(t time.Time) *WebsiteUpdate {
	wu.mutation.SetModifyTime(t)
	return wu
}

// ClearModifyTime clears the value of the "modify_time" field.
func (wu *WebsiteUpdate) ClearModifyTime() *WebsiteUpdate {
	wu.mutation.ClearModifyTime()
	return wu
}

// Mutation returns the WebsiteMutation object of the builder.
func (wu *WebsiteUpdate) Mutation() *WebsiteMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WebsiteUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks[int, WebsiteMutation](ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WebsiteUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WebsiteUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WebsiteUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WebsiteUpdate) defaults() {
	if _, ok := wu.mutation.ModifyTime(); !ok && !wu.mutation.ModifyTimeCleared() {
		v := website.UpdateDefaultModifyTime()
		wu.mutation.SetModifyTime(v)
	}
}

func (wu *WebsiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(website.Table, website.Columns, sqlgraph.NewFieldSpec(website.FieldID, field.TypeInt64))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.SortID(); ok {
		_spec.SetField(website.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := wu.mutation.AddedSortID(); ok {
		_spec.AddField(website.FieldSortID, field.TypeInt32, value)
	}
	if wu.mutation.SortIDCleared() {
		_spec.ClearField(website.FieldSortID, field.TypeInt32)
	}
	if value, ok := wu.mutation.Category(); ok {
		_spec.SetField(website.FieldCategory, field.TypeInt32, value)
	}
	if value, ok := wu.mutation.AddedCategory(); ok {
		_spec.AddField(website.FieldCategory, field.TypeInt32, value)
	}
	if wu.mutation.CategoryCleared() {
		_spec.ClearField(website.FieldCategory, field.TypeInt32)
	}
	if value, ok := wu.mutation.GetType(); ok {
		_spec.SetField(website.FieldType, field.TypeInt32, value)
	}
	if value, ok := wu.mutation.AddedType(); ok {
		_spec.AddField(website.FieldType, field.TypeInt32, value)
	}
	if wu.mutation.TypeCleared() {
		_spec.ClearField(website.FieldType, field.TypeInt32)
	}
	if value, ok := wu.mutation.WebsiteName(); ok {
		_spec.SetField(website.FieldWebsiteName, field.TypeString, value)
	}
	if wu.mutation.WebsiteNameCleared() {
		_spec.ClearField(website.FieldWebsiteName, field.TypeString)
	}
	if value, ok := wu.mutation.WebsiteIcon(); ok {
		_spec.SetField(website.FieldWebsiteIcon, field.TypeString, value)
	}
	if wu.mutation.WebsiteIconCleared() {
		_spec.ClearField(website.FieldWebsiteIcon, field.TypeString)
	}
	if value, ok := wu.mutation.WebsiteURL(); ok {
		_spec.SetField(website.FieldWebsiteURL, field.TypeString, value)
	}
	if wu.mutation.WebsiteURLCleared() {
		_spec.ClearField(website.FieldWebsiteURL, field.TypeString)
	}
	if value, ok := wu.mutation.Summary(); ok {
		_spec.SetField(website.FieldSummary, field.TypeString, value)
	}
	if wu.mutation.SummaryCleared() {
		_spec.ClearField(website.FieldSummary, field.TypeString)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(website.FieldDescription, field.TypeString, value)
	}
	if wu.mutation.DescriptionCleared() {
		_spec.ClearField(website.FieldDescription, field.TypeString)
	}
	if value, ok := wu.mutation.Status(); ok {
		_spec.SetField(website.FieldStatus, field.TypeString, value)
	}
	if wu.mutation.StatusCleared() {
		_spec.ClearField(website.FieldStatus, field.TypeString)
	}
	if value, ok := wu.mutation.CreateID(); ok {
		_spec.SetField(website.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedCreateID(); ok {
		_spec.AddField(website.FieldCreateID, field.TypeInt64, value)
	}
	if wu.mutation.CreateIDCleared() {
		_spec.ClearField(website.FieldCreateID, field.TypeInt64)
	}
	if value, ok := wu.mutation.CreateTime(); ok {
		_spec.SetField(website.FieldCreateTime, field.TypeTime, value)
	}
	if wu.mutation.CreateTimeCleared() {
		_spec.ClearField(website.FieldCreateTime, field.TypeTime)
	}
	if value, ok := wu.mutation.ModifyID(); ok {
		_spec.SetField(website.FieldModifyID, field.TypeInt64, value)
	}
	if value, ok := wu.mutation.AddedModifyID(); ok {
		_spec.AddField(website.FieldModifyID, field.TypeInt64, value)
	}
	if wu.mutation.ModifyIDCleared() {
		_spec.ClearField(website.FieldModifyID, field.TypeInt64)
	}
	if value, ok := wu.mutation.ModifyTime(); ok {
		_spec.SetField(website.FieldModifyTime, field.TypeTime, value)
	}
	if wu.mutation.ModifyTimeCleared() {
		_spec.ClearField(website.FieldModifyTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{website.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WebsiteUpdateOne is the builder for updating a single Website entity.
type WebsiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebsiteMutation
}

// SetSortID sets the "sort_id" field.
func (wuo *WebsiteUpdateOne) SetSortID(i int32) *WebsiteUpdateOne {
	wuo.mutation.ResetSortID()
	wuo.mutation.SetSortID(i)
	return wuo
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableSortID(i *int32) *WebsiteUpdateOne {
	if i != nil {
		wuo.SetSortID(*i)
	}
	return wuo
}

// AddSortID adds i to the "sort_id" field.
func (wuo *WebsiteUpdateOne) AddSortID(i int32) *WebsiteUpdateOne {
	wuo.mutation.AddSortID(i)
	return wuo
}

// ClearSortID clears the value of the "sort_id" field.
func (wuo *WebsiteUpdateOne) ClearSortID() *WebsiteUpdateOne {
	wuo.mutation.ClearSortID()
	return wuo
}

// SetCategory sets the "category" field.
func (wuo *WebsiteUpdateOne) SetCategory(i int32) *WebsiteUpdateOne {
	wuo.mutation.ResetCategory()
	wuo.mutation.SetCategory(i)
	return wuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableCategory(i *int32) *WebsiteUpdateOne {
	if i != nil {
		wuo.SetCategory(*i)
	}
	return wuo
}

// AddCategory adds i to the "category" field.
func (wuo *WebsiteUpdateOne) AddCategory(i int32) *WebsiteUpdateOne {
	wuo.mutation.AddCategory(i)
	return wuo
}

// ClearCategory clears the value of the "category" field.
func (wuo *WebsiteUpdateOne) ClearCategory() *WebsiteUpdateOne {
	wuo.mutation.ClearCategory()
	return wuo
}

// SetType sets the "type" field.
func (wuo *WebsiteUpdateOne) SetType(i int32) *WebsiteUpdateOne {
	wuo.mutation.ResetType()
	wuo.mutation.SetType(i)
	return wuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableType(i *int32) *WebsiteUpdateOne {
	if i != nil {
		wuo.SetType(*i)
	}
	return wuo
}

// AddType adds i to the "type" field.
func (wuo *WebsiteUpdateOne) AddType(i int32) *WebsiteUpdateOne {
	wuo.mutation.AddType(i)
	return wuo
}

// ClearType clears the value of the "type" field.
func (wuo *WebsiteUpdateOne) ClearType() *WebsiteUpdateOne {
	wuo.mutation.ClearType()
	return wuo
}

// SetWebsiteName sets the "website_name" field.
func (wuo *WebsiteUpdateOne) SetWebsiteName(s string) *WebsiteUpdateOne {
	wuo.mutation.SetWebsiteName(s)
	return wuo
}

// SetNillableWebsiteName sets the "website_name" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableWebsiteName(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetWebsiteName(*s)
	}
	return wuo
}

// ClearWebsiteName clears the value of the "website_name" field.
func (wuo *WebsiteUpdateOne) ClearWebsiteName() *WebsiteUpdateOne {
	wuo.mutation.ClearWebsiteName()
	return wuo
}

// SetWebsiteIcon sets the "website_icon" field.
func (wuo *WebsiteUpdateOne) SetWebsiteIcon(s string) *WebsiteUpdateOne {
	wuo.mutation.SetWebsiteIcon(s)
	return wuo
}

// SetNillableWebsiteIcon sets the "website_icon" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableWebsiteIcon(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetWebsiteIcon(*s)
	}
	return wuo
}

// ClearWebsiteIcon clears the value of the "website_icon" field.
func (wuo *WebsiteUpdateOne) ClearWebsiteIcon() *WebsiteUpdateOne {
	wuo.mutation.ClearWebsiteIcon()
	return wuo
}

// SetWebsiteURL sets the "website_url" field.
func (wuo *WebsiteUpdateOne) SetWebsiteURL(s string) *WebsiteUpdateOne {
	wuo.mutation.SetWebsiteURL(s)
	return wuo
}

// SetNillableWebsiteURL sets the "website_url" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableWebsiteURL(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetWebsiteURL(*s)
	}
	return wuo
}

// ClearWebsiteURL clears the value of the "website_url" field.
func (wuo *WebsiteUpdateOne) ClearWebsiteURL() *WebsiteUpdateOne {
	wuo.mutation.ClearWebsiteURL()
	return wuo
}

// SetSummary sets the "summary" field.
func (wuo *WebsiteUpdateOne) SetSummary(s string) *WebsiteUpdateOne {
	wuo.mutation.SetSummary(s)
	return wuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableSummary(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetSummary(*s)
	}
	return wuo
}

// ClearSummary clears the value of the "summary" field.
func (wuo *WebsiteUpdateOne) ClearSummary() *WebsiteUpdateOne {
	wuo.mutation.ClearSummary()
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WebsiteUpdateOne) SetDescription(s string) *WebsiteUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableDescription(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetDescription(*s)
	}
	return wuo
}

// ClearDescription clears the value of the "description" field.
func (wuo *WebsiteUpdateOne) ClearDescription() *WebsiteUpdateOne {
	wuo.mutation.ClearDescription()
	return wuo
}

// SetStatus sets the "status" field.
func (wuo *WebsiteUpdateOne) SetStatus(s string) *WebsiteUpdateOne {
	wuo.mutation.SetStatus(s)
	return wuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableStatus(s *string) *WebsiteUpdateOne {
	if s != nil {
		wuo.SetStatus(*s)
	}
	return wuo
}

// ClearStatus clears the value of the "status" field.
func (wuo *WebsiteUpdateOne) ClearStatus() *WebsiteUpdateOne {
	wuo.mutation.ClearStatus()
	return wuo
}

// SetCreateID sets the "create_id" field.
func (wuo *WebsiteUpdateOne) SetCreateID(i int64) *WebsiteUpdateOne {
	wuo.mutation.ResetCreateID()
	wuo.mutation.SetCreateID(i)
	return wuo
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableCreateID(i *int64) *WebsiteUpdateOne {
	if i != nil {
		wuo.SetCreateID(*i)
	}
	return wuo
}

// AddCreateID adds i to the "create_id" field.
func (wuo *WebsiteUpdateOne) AddCreateID(i int64) *WebsiteUpdateOne {
	wuo.mutation.AddCreateID(i)
	return wuo
}

// ClearCreateID clears the value of the "create_id" field.
func (wuo *WebsiteUpdateOne) ClearCreateID() *WebsiteUpdateOne {
	wuo.mutation.ClearCreateID()
	return wuo
}

// SetCreateTime sets the "create_time" field.
func (wuo *WebsiteUpdateOne) SetCreateTime(t time.Time) *WebsiteUpdateOne {
	wuo.mutation.SetCreateTime(t)
	return wuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableCreateTime(t *time.Time) *WebsiteUpdateOne {
	if t != nil {
		wuo.SetCreateTime(*t)
	}
	return wuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (wuo *WebsiteUpdateOne) ClearCreateTime() *WebsiteUpdateOne {
	wuo.mutation.ClearCreateTime()
	return wuo
}

// SetModifyID sets the "modify_id" field.
func (wuo *WebsiteUpdateOne) SetModifyID(i int64) *WebsiteUpdateOne {
	wuo.mutation.ResetModifyID()
	wuo.mutation.SetModifyID(i)
	return wuo
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (wuo *WebsiteUpdateOne) SetNillableModifyID(i *int64) *WebsiteUpdateOne {
	if i != nil {
		wuo.SetModifyID(*i)
	}
	return wuo
}

// AddModifyID adds i to the "modify_id" field.
func (wuo *WebsiteUpdateOne) AddModifyID(i int64) *WebsiteUpdateOne {
	wuo.mutation.AddModifyID(i)
	return wuo
}

// ClearModifyID clears the value of the "modify_id" field.
func (wuo *WebsiteUpdateOne) ClearModifyID() *WebsiteUpdateOne {
	wuo.mutation.ClearModifyID()
	return wuo
}

// SetModifyTime sets the "modify_time" field.
func (wuo *WebsiteUpdateOne) SetModifyTime(t time.Time) *WebsiteUpdateOne {
	wuo.mutation.SetModifyTime(t)
	return wuo
}

// ClearModifyTime clears the value of the "modify_time" field.
func (wuo *WebsiteUpdateOne) ClearModifyTime() *WebsiteUpdateOne {
	wuo.mutation.ClearModifyTime()
	return wuo
}

// Mutation returns the WebsiteMutation object of the builder.
func (wuo *WebsiteUpdateOne) Mutation() *WebsiteMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WebsiteUpdate builder.
func (wuo *WebsiteUpdateOne) Where(ps ...predicate.Website) *WebsiteUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WebsiteUpdateOne) Select(field string, fields ...string) *WebsiteUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Website entity.
func (wuo *WebsiteUpdateOne) Save(ctx context.Context) (*Website, error) {
	wuo.defaults()
	return withHooks[*Website, WebsiteMutation](ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WebsiteUpdateOne) SaveX(ctx context.Context) *Website {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WebsiteUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WebsiteUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WebsiteUpdateOne) defaults() {
	if _, ok := wuo.mutation.ModifyTime(); !ok && !wuo.mutation.ModifyTimeCleared() {
		v := website.UpdateDefaultModifyTime()
		wuo.mutation.SetModifyTime(v)
	}
}

func (wuo *WebsiteUpdateOne) sqlSave(ctx context.Context) (_node *Website, err error) {
	_spec := sqlgraph.NewUpdateSpec(website.Table, website.Columns, sqlgraph.NewFieldSpec(website.FieldID, field.TypeInt64))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Website.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, website.FieldID)
		for _, f := range fields {
			if !website.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != website.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.SortID(); ok {
		_spec.SetField(website.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := wuo.mutation.AddedSortID(); ok {
		_spec.AddField(website.FieldSortID, field.TypeInt32, value)
	}
	if wuo.mutation.SortIDCleared() {
		_spec.ClearField(website.FieldSortID, field.TypeInt32)
	}
	if value, ok := wuo.mutation.Category(); ok {
		_spec.SetField(website.FieldCategory, field.TypeInt32, value)
	}
	if value, ok := wuo.mutation.AddedCategory(); ok {
		_spec.AddField(website.FieldCategory, field.TypeInt32, value)
	}
	if wuo.mutation.CategoryCleared() {
		_spec.ClearField(website.FieldCategory, field.TypeInt32)
	}
	if value, ok := wuo.mutation.GetType(); ok {
		_spec.SetField(website.FieldType, field.TypeInt32, value)
	}
	if value, ok := wuo.mutation.AddedType(); ok {
		_spec.AddField(website.FieldType, field.TypeInt32, value)
	}
	if wuo.mutation.TypeCleared() {
		_spec.ClearField(website.FieldType, field.TypeInt32)
	}
	if value, ok := wuo.mutation.WebsiteName(); ok {
		_spec.SetField(website.FieldWebsiteName, field.TypeString, value)
	}
	if wuo.mutation.WebsiteNameCleared() {
		_spec.ClearField(website.FieldWebsiteName, field.TypeString)
	}
	if value, ok := wuo.mutation.WebsiteIcon(); ok {
		_spec.SetField(website.FieldWebsiteIcon, field.TypeString, value)
	}
	if wuo.mutation.WebsiteIconCleared() {
		_spec.ClearField(website.FieldWebsiteIcon, field.TypeString)
	}
	if value, ok := wuo.mutation.WebsiteURL(); ok {
		_spec.SetField(website.FieldWebsiteURL, field.TypeString, value)
	}
	if wuo.mutation.WebsiteURLCleared() {
		_spec.ClearField(website.FieldWebsiteURL, field.TypeString)
	}
	if value, ok := wuo.mutation.Summary(); ok {
		_spec.SetField(website.FieldSummary, field.TypeString, value)
	}
	if wuo.mutation.SummaryCleared() {
		_spec.ClearField(website.FieldSummary, field.TypeString)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(website.FieldDescription, field.TypeString, value)
	}
	if wuo.mutation.DescriptionCleared() {
		_spec.ClearField(website.FieldDescription, field.TypeString)
	}
	if value, ok := wuo.mutation.Status(); ok {
		_spec.SetField(website.FieldStatus, field.TypeString, value)
	}
	if wuo.mutation.StatusCleared() {
		_spec.ClearField(website.FieldStatus, field.TypeString)
	}
	if value, ok := wuo.mutation.CreateID(); ok {
		_spec.SetField(website.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedCreateID(); ok {
		_spec.AddField(website.FieldCreateID, field.TypeInt64, value)
	}
	if wuo.mutation.CreateIDCleared() {
		_spec.ClearField(website.FieldCreateID, field.TypeInt64)
	}
	if value, ok := wuo.mutation.CreateTime(); ok {
		_spec.SetField(website.FieldCreateTime, field.TypeTime, value)
	}
	if wuo.mutation.CreateTimeCleared() {
		_spec.ClearField(website.FieldCreateTime, field.TypeTime)
	}
	if value, ok := wuo.mutation.ModifyID(); ok {
		_spec.SetField(website.FieldModifyID, field.TypeInt64, value)
	}
	if value, ok := wuo.mutation.AddedModifyID(); ok {
		_spec.AddField(website.FieldModifyID, field.TypeInt64, value)
	}
	if wuo.mutation.ModifyIDCleared() {
		_spec.ClearField(website.FieldModifyID, field.TypeInt64)
	}
	if value, ok := wuo.mutation.ModifyTime(); ok {
		_spec.SetField(website.FieldModifyTime, field.TypeTime, value)
	}
	if wuo.mutation.ModifyTimeCleared() {
		_spec.ClearField(website.FieldModifyTime, field.TypeTime)
	}
	_node = &Website{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{website.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
